FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0145)     // call	void_handler
001C: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                        (0149)     // call	void_handler
0020: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0153)     // call	void_handler
0024: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
0028: 7D 05 4B LJMP  _UART_TX_ISR       (0157)     ljmp	_UART_TX_ISR
002B: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
002C: 7D 05 4C LJMP  _UART_RX_ISR       (0161)     ljmp	_UART_RX_ISR
002F: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0165)     // call	void_handler
0030: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0169)     // call	void_handler
0034: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0173)     // call	void_handler
0038: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0177)     // call	void_handler
003C: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
                                        (0181)     // call	void_handler
0040: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
                                        (0185)     // call	void_handler
0044: 7E       RETI                     (0186)     reti
                                        (0187) 
                                        (0188)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
                                        (0189)     // call	void_handler
0048: 7E       RETI                     (0190)     reti
                                        (0191) 
                                        (0192)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
                                        (0193)     // call	void_handler
004C: 7E       RETI                     (0194)     reti
                                        (0195) 
                                        (0196)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                        (0197)     // call	void_handler
0050: 7E       RETI                     (0198)     reti
                                        (0199) 
                                        (0200)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
                                        (0201)     // call	void_handler
0054: 7E       RETI                     (0202)     reti
                                        (0203) 
                                        (0204)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
                                        (0205)     // call	void_handler
0058: 7E       RETI                     (0206)     reti
                                        (0207) 
                                        (0208)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
                                        (0209)     // call	void_handler
005C: 7E       RETI                     (0210)     reti
                                        (0211) 
                                        (0212)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0213)     // call	void_handler
0060: 7E       RETI                     (0214)     reti
                                        (0215) 
                                        (0216)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0217)     // call	void_handler
0064: 7E       RETI                     (0218)     reti
0068: 71 10    OR    F,0x10             
                                        (0219)     ;---------------------------------------------------
                                        (0220)     ; Insert your custom code above this banner
                                        (0221)     ;---------------------------------------------------
                                        (0222)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0223) 
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;  Start of Execution.
                                        (0226) ;-----------------------------------------------------------------------------
                                        (0227) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0228) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0229) ;
                                        (0230) 
                                        (0231) IF	(TOOLCHAIN & HITECH)
                                        (0232)  	AREA PD_startup(CODE, REL, CON)
                                        (0233) ELSE
                                        (0234)     org 68h
                                        (0235) ENDIF
                                        (0236) __Start:
                                        (0237) 
                                        (0238)     ; initialize SMP values for voltage stabilization, if required,
                                        (0239)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0240)     ; least for now. 
                                        (0241)     ;
                                        (0242)     M8C_SetBank1
006A: 62 FA 00 MOV   REG[0xFA],0x0      (0243)     mov reg[0FAh], 0				;Reset flash location
006D: 62 E3 87 MOV   REG[0xE3],0x87     (0244)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0070: 70 EF    AND   F,0xEF             
                                        (0245)     M8C_SetBank0
                                        (0246) 
                                        (0247)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
0072: 50 20    MOV   A,0x20             (0248)     mov   A, 20h
0074: 28       ROMX                     (0249)     romx
0075: 50 40    MOV   A,0x40             (0250)     mov   A, 40h
0077: 28       ROMX                     (0251)     romx
0078: 50 60    MOV   A,0x60             (0252)     mov   A, 60h
007A: 28       ROMX                     (0253)     romx
007B: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0254)     ; %45%20%46%46% End workaround
                                        (0255) 
                                        (0256) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0257) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0258)     M8C_EnableWatchDog
                                        (0259) ENDIF
                                        (0260) 
                                        (0261) IF ( SELECT_32K )
                                        (0262)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0263) ELSE
007E: 41 FE FB AND   REG[0xFE],0xFB     (0264)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0265) ENDIF
                                        (0266) 
                                        (0267)     ;---------------------------
                                        (0268)     ; Set up the Temporary stack
                                        (0269)     ;---------------------------
                                        (0270)     ; A temporary stack is set up for the SSC instructions.
                                        (0271)     ; The real stack start will be assigned later.
                                        (0272)     ;
                                        (0273) _stack_start:          equ 80h
0081: 50 80    MOV   A,0x80             (0274)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0083: 4E       SWAP  SP,A               (0275)     swap  SP, A                    ; This is only temporary if going to LMM
0084: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0276) 
                                        (0277)     ;-----------------------------------------------
                                        (0278)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0279)     ;-----------------------------------------------
                                        (0280) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0281) 
                                        (0282) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0283)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0284)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0285)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0286)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0287)   IF ( AGND_BYPASS )
                                        (0288)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0289)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0290)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0291)     ; value using the proper trim values.
                                        (0292)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0293)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0294)   ENDIF
                                        (0295)  ENDIF
                                        (0296) ENDIF ; 5.0 V Operation
                                        (0297) 
                                        (0298) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0299)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0300)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0301)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0302)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0303)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0304)  ENDIF
                                        (0305) ENDIF ; 3.3 Volt Operation
                                        (0306) 
0087: 55 F8 00 MOV   [counter+205],0x0  (0307)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
008A: 55 F9 00 MOV   [counter+206],0x0  (0308)     mov  [bSSC_KEYSP], 0
008D: 71 10    OR    F,0x10             
                                        (0309) 
                                        (0310)     ;---------------------------------------
                                        (0311)     ; Initialize Crystal Oscillator and PLL
                                        (0312)     ;---------------------------------------
                                        (0313) 
                                        (0314) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0315)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0316)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0317)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0318)     ; the ECO to stabilize.
                                        (0319)     ;
                                        (0320)     M8C_SetBank1
                                        (0321)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0322)     M8C_SetBank0
                                        (0323)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0324)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0325)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0326) .WaitFor1s:
                                        (0327)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0328)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0329)                                           ;   since interrupts are not globally enabled
                                        (0330) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0331)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0332)     M8C_SetBank1
008F: 62 E0 02 MOV   REG[0xE0],0x2      (0333)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0092: 70 EF    AND   F,0xEF             
0094: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0334)     M8C_SetBank0
                                        (0335)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0336) 
                                        (0337) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0338) 
                                        (0339) IF ( PLL_MODE )
                                        (0340)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0341)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0342)     ;
                                        (0343)     M8C_SetBank1
                                        (0344)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0345)     M8C_SetBank0
                                        (0346)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0347)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0348) 
                                        (0349) .WaitFor16ms:
                                        (0350)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0351)     jz   .WaitFor16ms
                                        (0352)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0353)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0354)     M8C_SetBank0
                                        (0355) 
                                        (0356) IF      ( WAIT_FOR_32K )
                                        (0357) ELSE ; !( WAIT_FOR_32K )
                                        (0358)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0359)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0360) ENDIF ;(WAIT_FOR_32K)
                                        (0361) ENDIF ;(PLL_MODE)
                                        (0362) 
                                        (0363) 	;-------------------------------------------------------
                                        (0364)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0365)     ;-------------------------------------------------------
                                        (0366) 
                                        (0367)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0368) 
                                        (0369) IF (SYSCLK_SOURCE)
                                        (0370)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0371) ENDIF
                                        (0372)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0373) 
                                        (0374)     ;------------------------
                                        (0375)     ; Close CT leakage path.
                                        (0376)     ;------------------------
0097: 62 71 05 MOV   REG[0x71],0x5      (0377)     mov   reg[ACB00CR0], 05h
009A: 62 75 05 MOV   REG[0x75],0x5      (0378)     mov   reg[ACB01CR0], 05h
009D: 62 79 05 MOV   REG[0x79],0x5      (0379)     mov   reg[ACB02CR0], 05h
00A0: 62 7D 05 MOV   REG[0x7D],0x5      (0380)     mov   reg[ACB03CR0], 05h
00A3: 62 D1 07 MOV   REG[0xD1],0x7      
                                        (0381) 
                                        (0382) 
                                        (0383) IF	(TOOLCHAIN & HITECH)
                                        (0384)     ;---------------------------------------------
                                        (0385)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0386)     ;---------------------------------------------
                                        (0387) 	global		__Lstackps
                                        (0388) 	mov     a,low __Lstackps
                                        (0389) 	swap    a,sp
                                        (0390) 
                                        (0391) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0392)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0393)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0394)     RAM_SETPAGE_CUR 0
                                        (0395)     RAM_SETPAGE_MVW 0
                                        (0396)     RAM_SETPAGE_MVR 0
                                        (0397)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0398)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0399)     ELSE
                                        (0400)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0401)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0402) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0403) ELSE
                                        (0404)     ;---------------------------------------------
                                        (0405)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0406)     ;---------------------------------------------
                                        (0407) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0408)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00A6: 50 00    MOV   A,0x0              (0409)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00A8: 4E       SWAP  SP,A               (0410)     swap  A, SP
00A9: 62 D3 07 MOV   REG[0xD3],0x7      
00AC: 62 D0 00 MOV   REG[0xD0],0x0      
00AF: 62 D5 00 MOV   REG[0xD5],0x0      
00B2: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0411)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0412)     RAM_SETPAGE_CUR 0
                                        (0413)     RAM_SETPAGE_MVW 0
                                        (0414)     RAM_SETPAGE_MVR 0
                                        (0415) 
                                        (0416)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00B5: 71 C0    OR    F,0xC0             (0417)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0418)   ELSE
                                        (0419)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0420)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0421) ELSE
                                        (0422)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0423)     swap  SP, A
                                        (0424) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0425) ENDIF ;	TOOLCHAIN
                                        (0426) 
                                        (0427)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0428)     ;---------------------------------------------------
                                        (0429)     ; Insert your custom code below this banner
                                        (0430)     ;---------------------------------------------------
                                        (0431) 
                                        (0432)     ;---------------------------------------------------
                                        (0433)     ; Insert your custom code above this banner
                                        (0434)     ;---------------------------------------------------
                                        (0435)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0436) 
                                        (0437)     ;-------------------------
                                        (0438)     ; Load Base Configuration
                                        (0439)     ;-------------------------
                                        (0440)     ; Load global parameter settings and load the user modules in the
                                        (0441)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0442)     ; to minimize start up time; (2) We may still need to play with the
                                        (0443)     ; Sleep Timer.
                                        (0444)     ;
00B7: 7C 04 E9 LCALL 0x04E9             (0445)     lcall LoadConfigInit
                                        (0446) 
                                        (0447)     ;-----------------------------------
                                        (0448)     ; Initialize C Run-Time Environment
                                        (0449)     ;-----------------------------------
                                        (0450) IF ( C_LANGUAGE_SUPPORT )
                                        (0451) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0452)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0453)     mov  [__r0],<__bss_start
                                        (0454) BssLoop:
                                        (0455)     cmp  [__r0],<__bss_end
                                        (0456)     jz   BssDone
                                        (0457)     mvi  [__r0],A
                                        (0458)     jmp  BssLoop
                                        (0459) BssDone:
                                        (0460)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0461)     mov  X,<__idata_start
                                        (0462)     mov  [__r0],<__data_start
                                        (0463) IDataLoop:
                                        (0464)     cmp  [__r0],<__data_end
                                        (0465)     jz   C_RTE_Done
                                        (0466)     push A
                                        (0467)     romx
                                        (0468)     mvi  [__r0],A
                                        (0469)     pop  A
                                        (0470)     inc  X
                                        (0471)     adc  A,0
                                        (0472)     jmp  IDataLoop
                                        (0473) 
                                        (0474) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0475) 
                                        (0476) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00BA: 62 D0 00 MOV   REG[0xD0],0x0      (0477)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0478)                                        ; to use the Virtual Register page.
                                        (0479) 
                                        (0480)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0481)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0482)     ; text segment and may have been relocated by the Code Compressor.
                                        (0483)     ;
00BD: 50 03    MOV   A,0x3              (0484)     mov   A, >__pXIData                ; Get the address of the flash
00BF: 57 E0    MOV   X,0xE0             (0485)     mov   X, <__pXIData                ;   pointer to the xidata area.
00C1: 08       PUSH  A                  (0486)     push  A
00C2: 28       ROMX                     (0487)     romx                               ; get the MSB of xidata's address
00C3: 53 27    MOV   [__r0],A           (0488)     mov   [__r0], A
00C5: 18       POP   A                  (0489)     pop   A
00C6: 75       INC   X                  (0490)     inc   X
00C7: 09 00    ADC   A,0x0              (0491)     adc   A, 0
00C9: 28       ROMX                     (0492)     romx                               ; get the LSB of xidata's address
00CA: 4B       SWAP  A,X                (0493)     swap  A, X
00CB: 51 27    MOV   A,[__r0]           (0494)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0495)                                        ;   XIData structure list in flash
00CD: 80 04    JMP   0x00D2             (0496)     jmp   .AccessStruct
                                        (0497) 
                                        (0498)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0499)     ; values of C variables. Each structure contains 3 member elements.
                                        (0500)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0501)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0502)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0503)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0504)     ; value in the second member element, an unsigned byte:
                                        (0505)     ; (1) If the value of the second element is non-zero, it represents
                                        (0506)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0507)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0508)     ; the bytes are copied to the block of RAM.
                                        (0509)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0510)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0511)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0512) 
                                        (0513) .AccessNextStructLoop:
00CF: 75       INC   X                  (0514)     inc   X                            ; pXIData++
00D0: 09 00    ADC   A,0x0              (0515)     adc   A, 0
00D2: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0516) .AccessStruct:                         ; Entry point for first block
                                        (0517)     ;
                                        (0518)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0519)     ;
                                        (0520)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00D5: 08       PUSH  A                  (0521)     push  A
00D6: 28       ROMX                     (0522)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00D7: 60 D5    MOV   REG[0xD5],A        (0523)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00D9: 74       INC   A                  (0524)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00DA: A0 4B    JZ    0x0126             (0525)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00DC: 18       POP   A                  (0526)     pop   A                            ; restore pXIData to [A,X]
00DD: 75       INC   X                  (0527)     inc   X                            ; pXIData++
00DE: 09 00    ADC   A,0x0              (0528)     adc   A, 0
00E0: 08       PUSH  A                  (0529)     push  A
00E1: 28       ROMX                     (0530)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00E2: 53 27    MOV   [__r0],A           (0531)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00E4: 18       POP   A                  (0532)     pop   A                            ; restore pXIData to [A,X]
00E5: 75       INC   X                  (0533)     inc   X                            ; pXIData++ (point to size)
00E6: 09 00    ADC   A,0x0              (0534)     adc   A, 0
00E8: 08       PUSH  A                  (0535)     push  A
00E9: 28       ROMX                     (0536)     romx                               ; Get the size (CPU.A <- *pXIData)
00EA: A0 1C    JZ    0x0107             (0537)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00EC: 53 26    MOV   [__r1],A           (0538)     mov   [__r1], A                    ;             else downcount in __r1
00EE: 18       POP   A                  (0539)     pop   A                            ; restore pXIData to [A,X]
                                        (0540) 
                                        (0541) .CopyNextByteLoop:
                                        (0542)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0543)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0544)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0545)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0546)     ;
00EF: 75       INC   X                  (0547)     inc   X                            ; pXIData++ (point to next data byte)
00F0: 09 00    ADC   A,0x0              (0548)     adc   A, 0
00F2: 08       PUSH  A                  (0549)     push  A
00F3: 28       ROMX                     (0550)     romx                               ; Get the data value (CPU.A <- *pXIData)
00F4: 3F 27    MVI   [__r0],A           (0551)     mvi   [__r0], A                    ; Transfer the data to RAM
00F6: 47 27 FF TST   [__r0],0xFF        (0552)     tst   [__r0], 0xff                 ; Check for page crossing
00F9: B0 06    JNZ   0x0100             (0553)     jnz   .CopyLoopTail                ;   No crossing, keep going
00FB: 5D D5    MOV   A,REG[0xD5]        (0554)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00FD: 74       INC   A                  (0555)     inc   A
00FE: 60 D5    MOV   REG[0xD5],A        (0556)     mov   reg[ MVW_PP], A
                                        (0557) .CopyLoopTail:
0100: 18       POP   A                  (0558)     pop   A                            ; restore pXIData to [A,X]
0101: 7A 26    DEC   [__r1]             (0559)     dec   [__r1]                       ; End of this array in flash?
0103: BF EB    JNZ   0x00EF             (0560)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
0105: 8F C9    JMP   0x00CF             (0561)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0562) 
                                        (0563) .ClearRAMBlockToZero:
0107: 18       POP   A                  (0564)     pop   A                            ; restore pXIData to [A,X]
0108: 75       INC   X                  (0565)     inc   X                            ; pXIData++ (point to next data byte)
0109: 09 00    ADC   A,0x0              (0566)     adc   A, 0
010B: 08       PUSH  A                  (0567)     push  A
010C: 28       ROMX                     (0568)     romx                               ; Get the run length (CPU.A <- *pXIData)
010D: 53 26    MOV   [__r1],A           (0569)     mov   [__r1], A                    ; Initialize downcounter
010F: 50 00    MOV   A,0x0              (0570)     mov   A, 0                         ; Initialize source data
                                        (0571) 
                                        (0572) .ClearRAMBlockLoop:
                                        (0573)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0574)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0575)     ;
0111: 3F 27    MVI   [__r0],A           (0576)     mvi   [__r0], A                    ; Clear a byte
0113: 47 27 FF TST   [__r0],0xFF        (0577)     tst   [__r0], 0xff                 ; Check for page crossing
0116: B0 08    JNZ   0x011F             (0578)     jnz   .ClearLoopTail               ;   No crossing, keep going
0118: 5D D5    MOV   A,REG[0xD5]        (0579)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
011A: 74       INC   A                  (0580)     inc   A
011B: 60 D5    MOV   REG[0xD5],A        (0581)     mov   reg[ MVW_PP], A
011D: 50 00    MOV   A,0x0              (0582)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0583) .ClearLoopTail:
011F: 7A 26    DEC   [__r1]             (0584)     dec   [__r1]                       ; Was this the last byte?
0121: BF EF    JNZ   0x0111             (0585)     jnz   .ClearRAMBlockLoop           ;   No,  continue
0123: 18       POP   A                  (0586)     pop   A                            ;   Yes, restore pXIData to [A,X] and
0124: 8F AA    JMP   0x00CF             (0587)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0588) 
                                        (0589) .C_RTE_WrapUp:
0126: 18       POP   A                  (0590)     pop   A                            ; balance stack
0127: 71 10    OR    F,0x10             
0129: 70 EF    AND   F,0xEF             
                                        (0591) 
                                        (0592) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0593) 
                                        (0594) C_RTE_Done:
                                        (0595) 
                                        (0596) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0597) 
                                        (0598)     ;-------------------------------
                                        (0599)     ; Voltage Stabilization for SMP
                                        (0600)     ;-------------------------------
                                        (0601) 
                                        (0602) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0603) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0604)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0605)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0606)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0607)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0608)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0609)     M8C_SetBank1
                                        (0610)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0611)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0612)     M8C_SetBank0
                                        (0613)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0614)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0615) .WaitFor2ms:
                                        (0616)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0617)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0618) ENDIF ; SMP is operational
                                        (0619) ENDIF ; 5.0V Operation
                                        (0620) 
                                        (0621)     ;-------------------------------
                                        (0622)     ; Set Power-On Reset (POR) Level
                                        (0623)     ;-------------------------------
                                        (0624)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0625)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0626)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0627)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0628)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0629) 
                                        (0630)     M8C_SetBank1
                                        (0631) 
                                        (0632) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0633)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0634)  ELSE                                       ;    No, fast mode
                                        (0635)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0636)                                             ;       no, set midpoint POR in user code, if desired
                                        (0637)   ELSE ; 24HMz                              ;
                                        (0638)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0639)   ENDIF ; 24MHz
                                        (0640)  ENDIF ; Slow Mode
                                        (0641) ENDIF ; 5.0V Operation
                                        (0642) 
                                        (0643)     M8C_SetBank0
                                        (0644) 
                                        (0645)     ;----------------------------
                                        (0646)     ; Wrap up and invoke "main"
                                        (0647)     ;----------------------------
                                        (0648) 
                                        (0649)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0650)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0651)     ;
012B: 62 E0 00 MOV   REG[0xE0],0x0      (0652)     mov  reg[INT_MSK0],0
012E: 71 10    OR    F,0x10             
                                        (0653) 
                                        (0654)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0655)     ; And put decimator in full mode so it does not consume too much current.
                                        (0656)     ;
                                        (0657)     M8C_SetBank1
0130: 62 E0 00 MOV   REG[0xE0],0x0      (0658)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0133: 43 E7 80 OR    REG[0xE7],0x80     (0659)     or   reg[DEC_CR2],80h                    ; Put decimator in full mode
0136: 70 EF    AND   F,0xEF             
                                        (0660)     M8C_SetBank0
                                        (0661) 
                                        (0662)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0663)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0664)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0665)     ;
0138: 62 E2 00 MOV   REG[0xE2],0x0      (0666)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0667)                                    ; have been set during the boot process.
                                        (0668) IF	(TOOLCHAIN & HITECH)
                                        (0669) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0670) ELSE
                                        (0671) IF ENABLE_LJMP_TO_MAIN
                                        (0672)     ljmp  _main                    ; goto main (no return)
                                        (0673) ELSE
013B: 7C 07 27 LCALL __UserModules_end|_main|__text_start|_main(0674)     lcall _main                    ; call main
                                        (0675) .Exit:
013E: 8F FF    JMP   0x013E             (0676)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0677) ENDIF
                                        (0678) ENDIF ; TOOLCHAIN
                                        (0679) 
                                        (0680)     ;---------------------------------
                                        (0681)     ; Library Access to Global Parms
                                        (0682)     ;---------------------------------
                                        (0683)     ;
                                        (0684)  bGetPowerSetting:
                                        (0685) _bGetPowerSetting:
                                        (0686)     ; Returns value of POWER_SETTING in the A register.
                                        (0687)     ; No inputs. No Side Effects.
                                        (0688)     ;
0140: 50 10    MOV   A,0x10             (0689)     mov   A, POWER_SETTING
0142: 7F       RET                      (0690)     ret
                                        (0691) 
                                        (0692) IF	(TOOLCHAIN & HITECH)
                                        (0693) ELSE
                                        (0694)     ;---------------------------------
                                        (0695)     ; Order Critical RAM & ROM AREAs
                                        (0696)     ;---------------------------------
                                        (0697)     ;  'TOP' is all that has been defined so far...
                                        (0698) 
                                        (0699)     ;  ROM AREAs for C CONST, static & global items
                                        (0700)     ;
                                        (0701)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0702)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0703) __idata_start:
                                        (0704) 
                                        (0705)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0706) __func_lit_start:
                                        (0707) 
                                        (0708) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0709)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0710)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0711)     ; relocated by the code compressor, but the text area may shrink and
                                        (0712)     ; that moves xidata around.
                                        (0713)     ;
                                        (0714) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0715) ENDIF
                                        (0716) 
                                        (0717)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0718)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0719) 
                                        (0720)     ; CODE segment for general use
                                        (0721)     ;
                                        (0722)     AREA text (ROM, REL, CON)
                                        (0723) __text_start:
                                        (0724) 
                                        (0725)     ; RAM area usage
                                        (0726)     ;
                                        (0727)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0728) __data_start:
                                        (0729) 
                                        (0730)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0731)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0732)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0733) __bss_start:
                                        (0734) 
                                        (0735) ENDIF ; TOOLCHAIN
                                        (0736) 
                                        (0737) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.2946
03E4: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_vl_serialrxint_Bank1
                                        (0019) export LoadConfigTBL_vl_serialrxint_Bank0
                                        (0020) export LoadConfigTBL_vl_serialrxint_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_vl_serialrxint_Bank0:
                                        (0023) ;  Instance name UART, User Module UART
                                        (0024) ;       Instance name UART, Block Name RX(DCB03)
                                        (0025) 	db		2fh, 00h		;UART_RX_CONTROL_REG(DCB03CR0)
                                        (0026) 	db		2dh, 00h		;UART_(DCB03DR1)
                                        (0027) 	db		2eh, 00h		;UART_RX_BUFFER_REG (DCB03DR2)
                                        (0028) ;       Instance name UART, Block Name TX(DCB02)
                                        (0029) 	db		2bh, 00h		;UART_TX_CONTROL_REG(DCB02CR0)
                                        (0030) 	db		29h, 00h		;UART_TX_BUFFER_REG (DCB02DR1)
                                        (0031) 	db		2ah, 00h		;UART_(DCB02DR2)
                                        (0032) ;  Global Register values Bank 0
                                        (0033) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0034) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0035) 	db		63h, 05h		; AnalogReferenceControl register (ARF_CR)
                                        (0036) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0037) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0038) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0039) 	db		d6h, 00h		; I2CConfig register (I2C_CFG)
                                        (0040) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0041) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0042) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0043) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0044) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0045) 	db		b5h, 01h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0046) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0047) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0048) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0049) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0050) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0051) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0052) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0053) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0054) 	db		c0h, 00h		; Row_2_InputMux register (RDI2RI)
                                        (0055) 	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
                                        (0056) 	db		c2h, 20h		; Row_2_LogicInputAMux register (RDI2IS)
                                        (0057) 	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
                                        (0058) 	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
                                        (0059) 	db		c5h, 00h		; Row_2_OutputDrive_0 register (RDI2SRO0)
                                        (0060) 	db		c6h, 00h		; Row_2_OutputDrive_1 register (RDI2SRO1)
                                        (0061) 	db		c8h, 55h		; Row_3_InputMux register (RDI3RI)
                                        (0062) 	db		c9h, 00h		; Row_3_InputSync register (RDI3SYN)
                                        (0063) 	db		cah, 30h		; Row_3_LogicInputAMux register (RDI3IS)
                                        (0064) 	db		cbh, 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
                                        (0065) 	db		cch, 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
                                        (0066) 	db		cdh, 00h		; Row_3_OutputDrive_0 register (RDI3SRO0)
                                        (0067) 	db		ceh, 00h		; Row_3_OutputDrive_1 register (RDI3SRO1)
                                        (0068) 	db		6ch, 00h		; TMP_DR0 register (TMP_DR0)
                                        (0069) 	db		6dh, 00h		; TMP_DR1 register (TMP_DR1)
                                        (0070) 	db		6eh, 00h		; TMP_DR2 register (TMP_DR2)
                                        (0071) 	db		6fh, 00h		; TMP_DR3 register (TMP_DR3)
                                        (0072) 	db		ffh
                                        (0073) LoadConfigTBL_vl_serialrxint_Bank1:
                                        (0074) ;  Instance name UART, User Module UART
                                        (0075) ;       Instance name UART, Block Name RX(DCB03)
                                        (0076) 	db		2ch, 05h		;UART_RX_FUNC_REG   (DCB03FN)
                                        (0077) 	db		2dh, d1h		;UART_RX_INPUT_REG  (DCB03IN)
                                        (0078) 	db		2eh, 40h		;UART_RX_OUTPUT_REG (DCB03OU)
                                        (0079) ;       Instance name UART, Block Name TX(DCB02)
                                        (0080) 	db		28h, 1dh		;UART_TX_FUNC_REG   (DCB02FN)
                                        (0081) 	db		29h, 01h		;UART_TX_INPUT_REG  (DCB02IN)
                                        (0082) 	db		2ah, 44h		;UART_TX_OUTPUT_REG (DCB02OU)
                                        (0083) ;  Global Register values Bank 1
                                        (0084) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0085) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0086) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0087) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0088) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0089) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0090) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0091) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0092) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0093) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0094) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0095) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0096) 	db		e1h, ffh		; OscillatorControl_1 register (OSC_CR1)
                                        (0097) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0098) 	db		dfh, 19h		; OscillatorControl_3 register (OSC_CR3)
                                        (0099) 	db		deh, 00h		; OscillatorControl_4 register (OSC_CR4)
                                        (0100) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0101) 	db		e7h, 00h		; Type2Decimator_Control register (DEC_CR2)
                                        (0102) 	db		ffh
                                        (0103) AREA psoc_config(rom, rel)
                                        (0104) LoadConfigTBL_vl_serialrxint_Ordered:
                                        (0105) ;  Ordered Global Register values
                                        (0106) 	M8C_SetBank0
03E6: 62 00 00 MOV   REG[0x0],0x0       (0107) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
03E9: 71 10    OR    F,0x10             
                                        (0108) 	M8C_SetBank1
03EB: 62 00 01 MOV   REG[0x0],0x1       (0109) 	mov	reg[00h], 01h		; Port_0_DriveMode_0 register (PRT0DM0)
03EE: 62 01 FE MOV   REG[0x1],0xFE      (0110) 	mov	reg[01h], feh		; Port_0_DriveMode_1 register (PRT0DM1)
03F1: 70 EF    AND   F,0xEF             
                                        (0111) 	M8C_SetBank0
03F3: 62 03 FC MOV   REG[0x3],0xFC      (0112) 	mov	reg[03h], fch		; Port_0_DriveMode_2 register (PRT0DM2)
03F6: 62 02 03 MOV   REG[0x2],0x3       (0113) 	mov	reg[02h], 03h		; Port_0_GlobalSelect register (PRT0GS)
03F9: 71 10    OR    F,0x10             
                                        (0114) 	M8C_SetBank1
03FB: 62 02 00 MOV   REG[0x2],0x0       (0115) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
03FE: 62 03 00 MOV   REG[0x3],0x0       (0116) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
0401: 70 EF    AND   F,0xEF             
                                        (0117) 	M8C_SetBank0
0403: 62 01 00 MOV   REG[0x1],0x0       (0118) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
0406: 62 04 00 MOV   REG[0x4],0x0       (0119) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
0409: 71 10    OR    F,0x10             
                                        (0120) 	M8C_SetBank1
040B: 62 04 00 MOV   REG[0x4],0x0       (0121) 	mov	reg[04h], 00h		; Port_1_DriveMode_0 register (PRT1DM0)
040E: 62 05 FF MOV   REG[0x5],0xFF      (0122) 	mov	reg[05h], ffh		; Port_1_DriveMode_1 register (PRT1DM1)
0411: 70 EF    AND   F,0xEF             
                                        (0123) 	M8C_SetBank0
0413: 62 07 FF MOV   REG[0x7],0xFF      (0124) 	mov	reg[07h], ffh		; Port_1_DriveMode_2 register (PRT1DM2)
0416: 62 06 00 MOV   REG[0x6],0x0       (0125) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
0419: 71 10    OR    F,0x10             
                                        (0126) 	M8C_SetBank1
041B: 62 06 00 MOV   REG[0x6],0x0       (0127) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
041E: 62 07 00 MOV   REG[0x7],0x0       (0128) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
0421: 70 EF    AND   F,0xEF             
                                        (0129) 	M8C_SetBank0
0423: 62 05 00 MOV   REG[0x5],0x0       (0130) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
0426: 62 08 00 MOV   REG[0x8],0x0       (0131) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
0429: 71 10    OR    F,0x10             
                                        (0132) 	M8C_SetBank1
042B: 62 08 00 MOV   REG[0x8],0x0       (0133) 	mov	reg[08h], 00h		; Port_2_DriveMode_0 register (PRT2DM0)
042E: 62 09 FF MOV   REG[0x9],0xFF      (0134) 	mov	reg[09h], ffh		; Port_2_DriveMode_1 register (PRT2DM1)
0431: 70 EF    AND   F,0xEF             
                                        (0135) 	M8C_SetBank0
0433: 62 0B FF MOV   REG[0xB],0xFF      (0136) 	mov	reg[0bh], ffh		; Port_2_DriveMode_2 register (PRT2DM2)
0436: 62 0A 00 MOV   REG[0xA],0x0       (0137) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
0439: 71 10    OR    F,0x10             
                                        (0138) 	M8C_SetBank1
043B: 62 0A 00 MOV   REG[0xA],0x0       (0139) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
043E: 62 0B 00 MOV   REG[0xB],0x0       (0140) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
0441: 70 EF    AND   F,0xEF             
                                        (0141) 	M8C_SetBank0
0443: 62 09 00 MOV   REG[0x9],0x0       (0142) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
0446: 62 0C 00 MOV   REG[0xC],0x0       (0143) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
0449: 71 10    OR    F,0x10             
                                        (0144) 	M8C_SetBank1
044B: 62 0C 00 MOV   REG[0xC],0x0       (0145) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
044E: 62 0D 00 MOV   REG[0xD],0x0       (0146) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
0451: 70 EF    AND   F,0xEF             
                                        (0147) 	M8C_SetBank0
0453: 62 0F 00 MOV   REG[0xF],0x0       (0148) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
0456: 62 0E 00 MOV   REG[0xE],0x0       (0149) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
0459: 71 10    OR    F,0x10             
                                        (0150) 	M8C_SetBank1
045B: 62 0E 00 MOV   REG[0xE],0x0       (0151) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
045E: 62 0F 00 MOV   REG[0xF],0x0       (0152) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
0461: 70 EF    AND   F,0xEF             
                                        (0153) 	M8C_SetBank0
0463: 62 0D 00 MOV   REG[0xD],0x0       (0154) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
0466: 62 10 00 MOV   REG[0x10],0x0      (0155) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
0469: 71 10    OR    F,0x10             
                                        (0156) 	M8C_SetBank1
046B: 62 10 00 MOV   REG[0x10],0x0      (0157) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
046E: 62 11 00 MOV   REG[0x11],0x0      (0158) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
0471: 70 EF    AND   F,0xEF             
                                        (0159) 	M8C_SetBank0
0473: 62 13 00 MOV   REG[0x13],0x0      (0160) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
0476: 62 12 00 MOV   REG[0x12],0x0      (0161) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
0479: 71 10    OR    F,0x10             
                                        (0162) 	M8C_SetBank1
047B: 62 12 00 MOV   REG[0x12],0x0      (0163) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
047E: 62 13 00 MOV   REG[0x13],0x0      (0164) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
0481: 70 EF    AND   F,0xEF             
                                        (0165) 	M8C_SetBank0
0483: 62 11 00 MOV   REG[0x11],0x0      (0166) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
0486: 62 14 00 MOV   REG[0x14],0x0      (0167) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
0489: 71 10    OR    F,0x10             
                                        (0168) 	M8C_SetBank1
048B: 62 14 00 MOV   REG[0x14],0x0      (0169) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
048E: 62 15 00 MOV   REG[0x15],0x0      (0170) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
0491: 70 EF    AND   F,0xEF             
                                        (0171) 	M8C_SetBank0
0493: 62 17 00 MOV   REG[0x17],0x0      (0172) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
0496: 62 16 00 MOV   REG[0x16],0x0      (0173) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
0499: 71 10    OR    F,0x10             
                                        (0174) 	M8C_SetBank1
049B: 62 16 00 MOV   REG[0x16],0x0      (0175) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
049E: 62 17 00 MOV   REG[0x17],0x0      (0176) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
04A1: 70 EF    AND   F,0xEF             
                                        (0177) 	M8C_SetBank0
04A3: 62 15 00 MOV   REG[0x15],0x0      (0178) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
04A6: 62 18 00 MOV   REG[0x18],0x0      (0179) 	mov	reg[18h], 00h		; Port_6_Data register (PRT6DR)
04A9: 71 10    OR    F,0x10             
                                        (0180) 	M8C_SetBank1
04AB: 62 18 00 MOV   REG[0x18],0x0      (0181) 	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
04AE: 62 19 00 MOV   REG[0x19],0x0      (0182) 	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
04B1: 70 EF    AND   F,0xEF             
                                        (0183) 	M8C_SetBank0
04B3: 62 1B 00 MOV   REG[0x1B],0x0      (0184) 	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
04B6: 62 1A 00 MOV   REG[0x1A],0x0      (0185) 	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
04B9: 71 10    OR    F,0x10             
                                        (0186) 	M8C_SetBank1
04BB: 62 1A 00 MOV   REG[0x1A],0x0      (0187) 	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
04BE: 62 1B 00 MOV   REG[0x1B],0x0      (0188) 	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
04C1: 70 EF    AND   F,0xEF             
                                        (0189) 	M8C_SetBank0
04C3: 62 19 00 MOV   REG[0x19],0x0      (0190) 	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
04C6: 62 1C 00 MOV   REG[0x1C],0x0      (0191) 	mov	reg[1ch], 00h		; Port_7_Data register (PRT7DR)
04C9: 71 10    OR    F,0x10             
                                        (0192) 	M8C_SetBank1
04CB: 62 1C 00 MOV   REG[0x1C],0x0      (0193) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
04CE: 62 1D 00 MOV   REG[0x1D],0x0      (0194) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
04D1: 70 EF    AND   F,0xEF             
                                        (0195) 	M8C_SetBank0
04D3: 62 1F 00 MOV   REG[0x1F],0x0      (0196) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
04D6: 62 1E 00 MOV   REG[0x1E],0x0      (0197) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
04D9: 71 10    OR    F,0x10             
                                        (0198) 	M8C_SetBank1
04DB: 62 1E 00 MOV   REG[0x1E],0x0      (0199) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
04DE: 62 1F 00 MOV   REG[0x1F],0x0      (0200) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
04E1: 70 EF    AND   F,0xEF             
                                        (0201) 	M8C_SetBank0
04E3: 62 1D 00 MOV   REG[0x1D],0x0      (0202) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
04E6: 70 EF    AND   F,0xEF             
                                        (0203) 	M8C_SetBank0
04E8: 7F       RET                      (0204) 	ret
                                        (0205) 
                                        (0206) 
                                        (0207) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_vl_serialrxint
                                        (0026) export _LoadConfig_vl_serialrxint
                                        (0027) 
                                        (0028) export NO_SHADOW
                                        (0029) export _NO_SHADOW
                                        (0030) 
                                        (0031) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0032) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0033) 
                                        (0034) AREA psoc_config(rom, rel)
                                        (0035) 
                                        (0036) ;---------------------------------------------------------------------------
                                        (0037) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0038) ;                  parameters handled by boot code, like CPU speed). This
                                        (0039) ;                  function can be called from user code, but typically it
                                        (0040) ;                  is only called from boot.
                                        (0041) ;
                                        (0042) ;       INPUTS: None.
                                        (0043) ;      RETURNS: Nothing.
                                        (0044) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0045) ;               In the large memory model currently only the page
                                        (0046) ;               pointer registers listed below are modified.  This does
                                        (0047) ;               not guarantee that in future implementations of this
                                        (0048) ;               function other page pointer registers will not be
                                        (0049) ;               modified.
                                        (0050) ;          
                                        (0051) ;               Page Pointer Registers Modified: 
                                        (0052) ;               CUR_PP
                                        (0053) ;
                                        (0054) _LoadConfigInit:
                                        (0055)  LoadConfigInit:
                                        (0056)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0057)     
04E9: 7C 04 F0 LCALL 0x04F0             (0058) 	lcall	LoadConfig_vl_serialrxint
04EC: 7C 03 E4 LCALL 0x03E4             (0059) 	lcall	LoadConfigTBL_vl_serialrxint_Ordered
                                        (0060) 
                                        (0061) 
                                        (0062)     RAM_EPILOGUE RAM_USE_CLASS_4
04EF: 7F       RET                      (0063)     ret
                                        (0064) 
                                        (0065) ;---------------------------------------------------------------------------
                                        (0066) ; Load Configuration vl_serialrxint
                                        (0067) ;
                                        (0068) ;    Load configuration registers for vl_serialrxint.
                                        (0069) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0070) ;
                                        (0071) ;       INPUTS: None.
                                        (0072) ;      RETURNS: Nothing.
                                        (0073) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0074) ;               modified as may the Page Pointer registers!
                                        (0075) ;               In the large memory model currently only the page
                                        (0076) ;               pointer registers listed below are modified.  This does
                                        (0077) ;               not guarantee that in future implementations of this
                                        (0078) ;               function other page pointer registers will not be
                                        (0079) ;               modified.
                                        (0080) ;          
                                        (0081) ;               Page Pointer Registers Modified: 
                                        (0082) ;               CUR_PP
                                        (0083) ;
                                        (0084) _LoadConfig_vl_serialrxint:
                                        (0085)  LoadConfig_vl_serialrxint:
                                        (0086)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0087) 
04F0: 10       PUSH  X                  (0088) 	push	x
04F1: 70 EF    AND   F,0xEF             
                                        (0089)     M8C_SetBank0                    ; Force bank 0
04F3: 50 00    MOV   A,0x0              (0090)     mov     a, 0                    ; Specify bank 0
04F5: 67       ASR   A                  (0091)     asr     a                       ; Store in carry flag
                                        (0092)                                     ; Load bank 0 table:
04F6: 50 01    MOV   A,0x1              (0093)     mov     A, >LoadConfigTBL_vl_serialrxint_Bank0
04F8: 57 DF    MOV   X,0xDF             (0094)     mov     X, <LoadConfigTBL_vl_serialrxint_Bank0
04FA: 7C 05 0B LCALL 0x050B             (0095)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0096) 
04FD: 50 01    MOV   A,0x1              (0097)     mov     a, 1                    ; Specify bank 1
04FF: 67       ASR   A                  (0098)     asr     a                       ; Store in carry flag
                                        (0099)                                     ; Load bank 1 table:
0500: 50 02    MOV   A,0x2              (0100)     mov     A, >LoadConfigTBL_vl_serialrxint_Bank1
0502: 57 3A    MOV   X,0x3A             (0101)     mov     X, <LoadConfigTBL_vl_serialrxint_Bank1
0504: 7C 05 0B LCALL 0x050B             (0102)     lcall   LoadConfig              ; Load the bank 1 values
0507: 70 EF    AND   F,0xEF             
                                        (0103) 
                                        (0104)     M8C_SetBank0                    ; Force return to bank 0
0509: 20       POP   X                  (0105) 	pop		x
                                        (0106) 
                                        (0107)     RAM_EPILOGUE RAM_USE_CLASS_4
050A: 7F       RET                      (0108)     ret
                                        (0109) 
                                        (0110) 
                                        (0111) 
                                        (0112) 
                                        (0113) ;---------------------------------------------------------------------------
                                        (0114) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0115) ;              pairs. Terminate on address=0xFF.
                                        (0116) ;
                                        (0117) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0118) ;           Flag Register Carry bit encodes the Register Bank
                                        (0119) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0120) ;
                                        (0121) ;  RETURNS: nothing.
                                        (0122) ;
                                        (0123) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0124) ;                X-3 Temporary store for register address
                                        (0125) ;                X-2 LSB of config table address
                                        (0126) ;                X-1 MSB of config table address
                                        (0127) ;
                                        (0128) LoadConfig:
                                        (0129)     RAM_PROLOGUE RAM_USE_CLASS_2
050B: 38 02    ADD   SP,0x2             (0130)     add     SP, 2                   ; Set up local vars
050D: 10       PUSH  X                  (0131)     push    X                       ; Save config table address on stack
050E: 08       PUSH  A                  (0132)     push    A
050F: 4F       MOV   X,SP               (0133)     mov     X, SP
0510: 56 FC 00 MOV   [X-4],0x0          (0134)     mov     [X-4], 0                ; Set default Destination to Bank 0
0513: D0 04    JNC   0x0518             (0135)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
0515: 56 FC 01 MOV   [X-4],0x1          (0136)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0137) .BankSelectSaved:
0518: 18       POP   A                  (0138)     pop     A
0519: 20       POP   X                  (0139)     pop     X
051A: 70 EF    AND   F,0xEF             
051C: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0140) 
                                        (0141) LoadConfigLp:
                                        (0142)     M8C_SetBank0                    ; Switch to bank 0
                                        (0143)     M8C_ClearWDT                    ; Clear the watchdog for long inits
051F: 10       PUSH  X                  (0144)     push    X                       ; Preserve the config table address
0520: 08       PUSH  A                  (0145)     push    A
0521: 28       ROMX                     (0146)     romx                            ; Load register address from table
0522: 39 FF    CMP   A,0xFF             (0147)     cmp     A, END_CONFIG_TABLE     ; End of table?
0524: A0 1F    JZ    0x0544             (0148)     jz      EndLoadConfig           ;   Yes, go wrap it up
0526: 4F       MOV   X,SP               (0149)     mov     X, SP                   ;
0527: 48 FC 01 TST   [X-4],0x1          (0150)     tst     [X-4], 1                ; Loading IO Bank 1?
052A: A0 03    JZ    0x052E             (0151)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
052C: 71 10    OR    F,0x10             
                                        (0152)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0153) .IOBankNowSet:
052E: 54 FD    MOV   [X-3],A            (0154)     mov     [X-3], A                ; Stash the register address
0530: 18       POP   A                  (0155)     pop     A                       ; Retrieve the table address
0531: 20       POP   X                  (0156)     pop     X
0532: 75       INC   X                  (0157)     inc     X                       ; Advance to the data byte
0533: 09 00    ADC   A,0x0              (0158)     adc     A, 0
0535: 10       PUSH  X                  (0159)     push    X                       ; Save the config table address again
0536: 08       PUSH  A                  (0160)     push    A
0537: 28       ROMX                     (0161)     romx                            ; load config data from the table
0538: 4F       MOV   X,SP               (0162)     mov     X, SP                   ; retrieve the register address
0539: 59 FD    MOV   X,[X-3]            (0163)     mov     X, [X-3]
053B: 61 00    MOV   REG[X+0x0],A       (0164)     mov     reg[X], A               ; Configure the register
053D: 18       POP   A                  (0165)     pop     A                       ; retrieve the table address
053E: 20       POP   X                  (0166)     pop     X
053F: 75       INC   X                  (0167)     inc     X                       ; advance to next table entry
0540: 09 00    ADC   A,0x0              (0168)     adc     A, 0
0542: 8F D7    JMP   0x051A             (0169)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0170) EndLoadConfig:
0544: 38 FC    ADD   SP,0xFC            (0171)     add     SP, -4
0546: 70 3F    AND   F,0x3F             
0548: 71 C0    OR    F,0xC0             
                                        (0172)     RAM_EPILOGUE RAM_USE_CLASS_2
054A: 7F       RET                      (0173)     ret
                                        (0174) 
                                        (0175) AREA InterruptRAM(ram, rel)
                                        (0176) 
                                        (0177) NO_SHADOW:
                                        (0178) _NO_SHADOW:
FILE: lib\uartint.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   UARTINT.asm
                                        (0004) ;;  Version: 5.3, Updated on 2013/5/19 at 10:44:49
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART Interrupt Service Routine.
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) 
                                        (0014) include "UART.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "m8c.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _UART_TX_ISR
                                        (0022) export  _UART_RX_ISR
                                        (0023) 
                                        (0024) IF (UART_RXBUF_ENABLE)
                                        (0025) export  UART_aRxBuffer
                                        (0026) export _UART_aRxBuffer
                                        (0027) export  UART_bRxCnt
                                        (0028) export _UART_bRxCnt
                                        (0029) export  UART_fStatus
                                        (0030) export _UART_fStatus
                                        (0031) ENDIF
                                        (0032) 
                                        (0033) 
                                        (0034) ;-----------------------------------------------
                                        (0035) ; Variable Allocation
                                        (0036) ;-----------------------------------------------
                                        (0037) AREA InterruptRAM (RAM, REL, CON)
                                        (0038) 
                                        (0039) IF (UART_RXBUF_ENABLE)
                                        (0040)  UART_fStatus:
                                        (0041) _UART_fStatus:      BLK  1
                                        (0042)  UART_bRxCnt:
                                        (0043) _UART_bRxCnt:       BLK  1
                                        (0044) AREA UART_RAM (RAM, REL, CON)
                                        (0045)  UART_aRxBuffer:
                                        (0046) _UART_aRxBuffer:    BLK UART_RX_BUFFER_SIZE
                                        (0047) ENDIF
                                        (0048) 
                                        (0049) AREA InterruptRAM (RAM, REL, CON)
                                        (0050) 
                                        (0051) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0052) ;---------------------------------------------------
                                        (0053) ; Insert your custom declarations below this banner
                                        (0054) ;---------------------------------------------------
                                        (0055) 
                                        (0056) ;------------------------
                                        (0057) ;  Includes
                                        (0058) ;------------------------
                                        (0059) 
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL, CON)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _UART_TX_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION:
                                        (0083) ;     UART TX interrupt handler for instance UART.
                                        (0084) ;
                                        (0085) ;     This is a place holder function.  If the user requires use of an interrupt
                                        (0086) ;     handler for this function, then place code where specified.
                                        (0087) ;-----------------------------------------------------------------------------
                                        (0088) 
                                        (0089) _UART_TX_ISR:
                                        (0090)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0091)    ;---------------------------------------------------
                                        (0092)    ; Insert your custom assembly code below this banner
                                        (0093)    ;---------------------------------------------------
                                        (0094)    ;   NOTE: interrupt service routines must preserve
                                        (0095)    ;   the values of the A and X CPU registers.
                                        (0096)    
                                        (0097)    ;---------------------------------------------------
                                        (0098)    ; Insert your custom assembly code above this banner
                                        (0099)    ;---------------------------------------------------
                                        (0100)    
                                        (0101)    ;---------------------------------------------------
                                        (0102)    ; Insert a lcall to a C function below this banner
                                        (0103)    ; and un-comment the lines between these banners
                                        (0104)    ;---------------------------------------------------
                                        (0105)    
                                        (0106)    ;PRESERVE_CPU_CONTEXT
                                        (0107)    ;lcall _My_C_Function
                                        (0108)    ;RESTORE_CPU_CONTEXT
                                        (0109)    
                                        (0110)    ;---------------------------------------------------
                                        (0111)    ; Insert a lcall to a C function above this banner
                                        (0112)    ; and un-comment the lines between these banners
                                        (0113)    ;---------------------------------------------------
                                        (0114)    ;@PSoC_UserCode_END@ (Do not change this line.)
054B: 7E       RETI                     (0115)    reti
054C: 08       PUSH  A                  
054D: 5D D0    MOV   A,REG[0xD0]        
054F: 08       PUSH  A                  
0550: 5D D3    MOV   A,REG[0xD3]        
0552: 08       PUSH  A                  
0553: 5D D4    MOV   A,REG[0xD4]        
0555: 08       PUSH  A                  
0556: 5D D5    MOV   A,REG[0xD5]        
0558: 08       PUSH  A                  
0559: 70 3F    AND   F,0x3F             
055B: 71 C0    OR    F,0xC0             
055D: 62 D0 00 MOV   REG[0xD0],0x0      
0560: 51 27    MOV   A,[__r0]           
0562: 08       PUSH  A                  
0563: 51 26    MOV   A,[__r1]           
0565: 08       PUSH  A                  
0566: 51 25    MOV   A,[__r2]           
0568: 08       PUSH  A                  
0569: 51 24    MOV   A,[__r3]           
056B: 08       PUSH  A                  
056C: 51 23    MOV   A,[__r4]           
056E: 08       PUSH  A                  
056F: 51 22    MOV   A,[__r5]           
0571: 08       PUSH  A                  
0572: 51 21    MOV   A,[__r6]           
0574: 08       PUSH  A                  
0575: 51 20    MOV   A,[__r7]           
0577: 08       PUSH  A                  
0578: 51 1F    MOV   A,[__r8]           
057A: 08       PUSH  A                  
057B: 51 1E    MOV   A,[__r9]           
057D: 08       PUSH  A                  
057E: 51 1D    MOV   A,[__r10]          
0580: 08       PUSH  A                  
0581: 51 1C    MOV   A,[__r11]          
0583: 08       PUSH  A                  
0584: 51 1B    MOV   A,[__rX]           
0586: 08       PUSH  A                  
0587: 51 1A    MOV   A,[__rY]           
0589: 08       PUSH  A                  
058A: 51 19    MOV   A,[__rZ]           
058C: 08       PUSH  A                  
058D: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0116) 
                                        (0117) 
                                        (0118) ;-----------------------------------------------------------------------------
                                        (0119) ;  FUNCTION NAME: _UART_RX_ISR
                                        (0120) ;
                                        (0121) ;  DESCRIPTION:
                                        (0122) ;     UART RX interrupt handler for instance UART.
                                        (0123) ;     This ISR handles the background processing of received characters if
                                        (0124) ;     the buffer is enabled.
                                        (0125) ;
                                        (0126) ;
                                        (0127) ;  The following assumes that the RX buffer feature has been enabled.
                                        (0128) ;
                                        (0129) ;  SIDE EFFECTS:
                                        (0130) ;     There are 3 posible errors that may occur with the serial port.
                                        (0131) ;      1) Parity Error
                                        (0132) ;      2) Framing Error
                                        (0133) ;      3) OverRun Error
                                        (0134) ;
                                        (0135) ;  This user module check for parity and framing error.  If either of these
                                        (0136) ;  two errors are detected, the data is read and ignored.  When an overRun
                                        (0137) ;  error occurs, the last byte was lost, but the current byte is valid.  For
                                        (0138) ;  this reason this error is ignored at this time.  Code could be added to
                                        (0139) ;  this ISR to set a flag if an error condition occurs.
                                        (0140) ;
                                        (0141) ;  THEORY of OPERATION:
                                        (0142) ;     When using the RX buffer feature, the ISR collects received characters
                                        (0143) ;     in a buffer until the user defined command terminator is detected.  After
                                        (0144) ;     the command terminator is detected, the command bit is set and all other
                                        (0145) ;     characters will be ignored until the command bit is reset.  Up to
                                        (0146) ;     buffer_size - 1 characters will be collected waiting for a command
                                        (0147) ;     terminator.  After that, the characters will be discarded, although
                                        (0148) ;     a command determinator will still cause the command bit to be set.
                                        (0149) ;
                                        (0150) ;-----------------------------------------------------------------------------
                                        (0151) _UART_RX_ISR:
                                        (0152) 
                                        (0153)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0154)    ;---------------------------------------------------
                                        (0155)    ; Insert your custom assembly code below this banner
                                        (0156)    ;---------------------------------------------------
                                        (0157)    ;   NOTE: interrupt service routines must preserve
                                        (0158)    ;   the values of the A and X CPU registers.
                                        (0159)    
                                        (0160)    ;---------------------------------------------------
                                        (0161)    ; Insert your custom assembly code above this banner
                                        (0162)    ;---------------------------------------------------
                                        (0163)    
                                        (0164) 
                                        (0165)    
                                        (0166)    ;---------------------------------------------------
                                        (0167)    ; Insert a lcall to a C function below this banner
                                        (0168)    ; and un-comment the lines between these banners
                                        (0169)    ;---------------------------------------------------
                                        (0170)    
                                        (0171)    PRESERVE_CPU_CONTEXT
0590: 7C 07 E0 LCALL _uartIsrRx         (0172)    lcall _uartIsrRx
0593: 70 3F    AND   F,0x3F             
0595: 71 C0    OR    F,0xC0             
0597: 62 D0 00 MOV   REG[0xD0],0x0      
059A: 18       POP   A                  
059B: 53 19    MOV   [__rZ],A           
059D: 18       POP   A                  
059E: 53 1A    MOV   [__rY],A           
05A0: 18       POP   A                  
05A1: 53 1B    MOV   [__rX],A           
05A3: 18       POP   A                  
05A4: 53 1C    MOV   [__r11],A          
05A6: 18       POP   A                  
05A7: 53 1D    MOV   [__r10],A          
05A9: 18       POP   A                  
05AA: 53 1E    MOV   [__r9],A           
05AC: 18       POP   A                  
05AD: 53 1F    MOV   [__r8],A           
05AF: 18       POP   A                  
05B0: 53 20    MOV   [__r7],A           
05B2: 18       POP   A                  
05B3: 53 21    MOV   [__r6],A           
05B5: 18       POP   A                  
05B6: 53 22    MOV   [__r5],A           
05B8: 18       POP   A                  
05B9: 53 23    MOV   [__r4],A           
05BB: 18       POP   A                  
05BC: 53 24    MOV   [__r3],A           
05BE: 18       POP   A                  
05BF: 53 25    MOV   [__r2],A           
05C1: 18       POP   A                  
05C2: 53 26    MOV   [__r1],A           
05C4: 18       POP   A                  
05C5: 53 27    MOV   [__r0],A           
05C7: 18       POP   A                  
05C8: 60 D5    MOV   REG[0xD5],A        
05CA: 18       POP   A                  
05CB: 60 D4    MOV   REG[0xD4],A        
05CD: 18       POP   A                  
05CE: 60 D3    MOV   REG[0xD3],A        
05D0: 18       POP   A                  
05D1: 60 D0    MOV   REG[0xD0],A        
05D3: 70 00    AND   F,0x0              
05D5: 18       POP   A                  
                                        (0173)    RESTORE_CPU_CONTEXT
                                        (0174)    
                                        (0175)    ;---------------------------------------------------
                                        (0176)    ; Insert a lcall to a C function above this banner
                                        (0177)    ; and un-comment the lines between these banners
                                        (0178)    ;---------------------------------------------------
                                        (0179)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0180) 
                                        (0181) IF (UART_RXBUF_ENABLE)
                                        (0182)    push A
                                        (0183)    push X
                                        (0184)    
                                        (0185)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0186)       REG_PRESERVE IDX_PP
                                        (0187)    ENDIF
                                        (0188)    
                                        (0189)    mov  X,[UART_bRxCnt]                                    ; Load X with byte counter
                                        (0190)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Read the control register
                                        (0191)    push A                                                  ; Store copy for later test
                                        (0192)                                                            ; IF real RX interrupt
                                        (0193)    and  A,UART_RX_REG_FULL                                 ; Did really really get an IRQ
                                        (0194)    jnz  .UARTRX_ReadRx                                     ; Data ready, go get it
                                        (0195)    pop  A                                                  ; Restore stack
                                        (0196)    jmp  .RESTORE_IDX_PP
                                        (0197) 
                                        (0198) .UARTRX_ReadRx:
                                        (0199)    pop  A                                                  ; Restore status flags
                                        (0200)                                                            ; IF there is no error, get data
                                        (0201)                                                            ; Check for parity or framing error
                                        (0202)    and  A,UART_RX_ERROR
                                        (0203)    jz   .UARTRX_NO_ERROR                                   ; If there is not an Error go read data
                                        (0204) 
                                        (0205)    or   [UART_fStatus],A                                   ; Set error flags (parity,framing,overrun) bits
                                        (0206)    tst  REG[UART_RX_BUFFER_REG], 0x00                      ; Read the data buffer to clear it.
                                        (0207)    and  A,UART_RX_FRAMING_ERROR                            ; Check for framing error special case
                                        (0208)    jz   .RESTORE_IDX_PP                                    ; Not framing error, all done
                                        (0209) 
                                        (0210)                                                            ; Disable and re-enable RX to reset after
                                        (0211)                                                            ; framing error.
                                        (0212)    and   REG[UART_RX_CONTROL_REG], ~UART_RX_ENABLE         ; Disable RX
                                        (0213)    or    REG[UART_RX_CONTROL_REG],  UART_RX_ENABLE         ; Enable RX
                                        (0214)    jmp  .RESTORE_IDX_PP                                    ; Done with framing error, leave.
                                        (0215) 
                                        (0216) 
                                        (0217) .UARTRX_NO_ERROR:
                                        (0218)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read the data buffer
                                        (0219) 
                                        (0220)                                                            ; IF buffer not full
                                        (0221)    tst  [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Check for buffer full
                                        (0222)    jnz  .RESTORE_IDX_PP                                    ; All done
                                        (0223) 
                                        (0224)    cmp  A,UART_CMD_TERM                                    ; Check for End of command
                                        (0225)    jnz  .UARTRX_CHK_BACKSPACE
                                        (0226)    or   [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Set command ready bit
                                        (0227) 
                                        (0228) 
                                        (0229) 
                                        (0230)    RAM_SETPAGE_IDX >UART_aRxBuffer
                                        (0231)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0232)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data
                                        (0233)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0234)    jmp  .RESTORE_IDX_PP
                                        (0235) 
                                        (0236) .UARTRX_CHK_BACKSPACE:                                     ; 
                                        (0237) IF(UART_BACKSPACE_ENABLE)                                  ; Enable if backspace/delete mode
                                        (0238)    cmp  A,UART_BACKSPACE_ENABLE                            ; Check for backspace character
                                        (0239)    jnz  .UARTRX_IGNORE                                     ; If not, skip the backspace stuff
                                        (0240)    cmp  [UART_bRxCnt],00h                                  ; Check if buffer empty
                                        (0241)    jz   .RESTORE_IDX_PP                                    ; 
                                        (0242)    dec  [UART_bRxCnt]                                      ; Decrement buffer count by one.
                                        (0243)    jmp  .RESTORE_IDX_PP
                                        (0244) ENDIF                                                      ; 
                                        (0245) 
                                        (0246) .UARTRX_IGNORE:
                                        (0247) IF(UART_RX_IGNORE_BELOW)                                   ; Ignore charaters below this value
                                        (0248)    cmp  A,UART_RX_IGNORE_BELOW                             ; If ignore char is set to 0x00, do not
                                        (0249)    jc   .RESTORE_IDX_PP                                    ; ignore any characters.
                                        (0250) ENDIF
                                        (0251) 
                                        (0252) .UARTRX_CHK_OVFL:                                          ; Check for MAX String here
                                        (0253) 	
                                        (0254)    RAM_SETPAGE_IDX >UART_aRxBuffer                         ;   using idexed address mode
                                        (0255)    cmp  [UART_bRxCnt],(UART_RX_BUFFER_SIZE - 1)
                                        (0256)    jc   .UARTRX_ISR_GETDATA
                                        (0257)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0258)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data in the buffer
                                        (0259)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0260)    or   [UART_fStatus],UART_RX_BUF_OVERRUN                 ; Set error flags (parity,framing,overrun) bits
                                        (0261)    jmp  .RESTORE_IDX_PP
                                        (0262) 
                                        (0263) .UARTRX_ISR_GETDATA:                                       ; IF input data == "CR", then end of command
                                        (0264)                                                            ; X is already loaded with pointer
                                        (0265)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0266)    mov  [X+UART_aRxBuffer],A                               ; store data in array
                                        (0267)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0268)    inc  X                                                  ; Inc the pointer
                                        (0269)    mov  [UART_bRxCnt],X                                    ; Restore the pointer
                                        (0270)                                                            ; ENDIF max string size
                                        (0271) .RESTORE_IDX_PP:
                                        (0272)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0273)       REG_RESTORE IDX_PP
                                        (0274)    ENDIF
                                        (0275) 
                                        (0276) .END_UARTRX_ISR:
                                        (0277)    pop  X
                                        (0278)    pop  A
                                        (0279) 
                                        (0280) ENDIF
                                        (0281) 
                                        (0282) UART_RX_ISR_END:
05D6: 7E       RETI                     (0283)    reti
                                        (0284) 
                                        (0285) ; end of file UARTINT.asm
                                        (0286) 
FILE: lib\uart.asm                      (0001) ;;*****************************************************************************
05D7: 43 E1 04 OR    REG[0xE1],0x4      (0002) ;;*****************************************************************************
05DA: 43 E1 08 OR    REG[0xE1],0x8      
                                        (0003) ;;  Filename:   UART.asm
                                        (0004) ;;  Version: 5.3, Updated on 2013/5/19 at 10:44:49
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART User Module software implementation file for the
                                        (0008) ;;                22/24/25/26/27xxx families.
                                        (0009) ;;
                                        (0010) ;;
                                        (0011) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0012) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0013) ;;        This means it is the caller's responsibility to preserve any values
                                        (0014) ;;        in the X and A registers that are still needed after the API functions
                                        (0015) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0016) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0017) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0018) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0019) ;;-----------------------------------------------------------------------------
                                        (0020) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0021) ;;*****************************************************************************
                                        (0022) ;;*****************************************************************************
                                        (0023) 
                                        (0024) 
                                        (0025) include "m8c.inc"
                                        (0026) include "memory.inc"
                                        (0027) include "UART.inc"
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ;  Global Symbols
                                        (0031) ;-----------------------------------------------
                                        (0032) ;-------------------------------------------------------------------
                                        (0033) ;  Declare the functions global for both assembler and C compiler.
                                        (0034) ;
                                        (0035) ;  Note that there are two names for each API. First name is
                                        (0036) ;  assembler reference. Name with underscore is name refence for
                                        (0037) ;  C compiler.  Calling function in C source code does not require
                                        (0038) ;  the underscore.
                                        (0039) ;-------------------------------------------------------------------
                                        (0040) export  UART_SetTxIntMode
                                        (0041) export _UART_SetTxIntMode
                                        (0042) export  UART_EnableInt
                                        (0043) export _UART_EnableInt
                                        (0044) export  UART_DisableInt
                                        (0045) export _UART_DisableInt
                                        (0046) 
                                        (0047) export  UART_Start
                                        (0048) export _UART_Start
                                        (0049) export  UART_Stop
                                        (0050) export _UART_Stop
                                        (0051) export  UART_SendData
                                        (0052) export _UART_SendData
                                        (0053) export  UART_bReadTxStatus
                                        (0054) export _UART_bReadTxStatus
                                        (0055) export  UART_bReadRxData
                                        (0056) export _UART_bReadRxData
                                        (0057) export  UART_bReadRxStatus
                                        (0058) export _UART_bReadRxStatus
                                        (0059) 
                                        (0060) export  UART_IntCntl
                                        (0061) export _UART_IntCntl
                                        (0062) 
                                        (0063) export  UART_TxIntMode
                                        (0064) export _UART_TxIntMode
                                        (0065) 
                                        (0066) export  UART_PutSHexByte
                                        (0067) export _UART_PutSHexByte
                                        (0068) export  UART_PutSHexInt
                                        (0069) export _UART_PutSHexInt
                                        (0070) 
                                        (0071) export  UART_CPutString
                                        (0072) export _UART_CPutString
                                        (0073) export  UART_PutString
                                        (0074) export _UART_PutString
                                        (0075) export  UART_PutChar
                                        (0076) export _UART_PutChar
                                        (0077) export  UART_Write
                                        (0078) export _UART_Write
                                        (0079) export  UART_CWrite
                                        (0080) export _UART_CWrite
                                        (0081) 
                                        (0082) export  UART_cGetChar
                                        (0083) export _UART_cGetChar
                                        (0084) export  UART_cReadChar
                                        (0085) export _UART_cReadChar
                                        (0086) export  UART_iReadChar
                                        (0087) export _UART_iReadChar
                                        (0088) export  UART_PutCRLF
                                        (0089) export _UART_PutCRLF
                                        (0090) 
                                        (0091) IF (UART_RXBUF_ENABLE)
                                        (0092) export  UART_CmdReset
                                        (0093) export _UART_CmdReset
                                        (0094) export  UART_bCmdCheck
                                        (0095) export _UART_bCmdCheck
                                        (0096) export  UART_bCmdLength
                                        (0097) export _UART_bCmdLength
                                        (0098) export  UART_bErrCheck
                                        (0099) export _UART_bErrCheck
                                        (0100) 
                                        (0101) export  UART_szGetParam
                                        (0102) export _UART_szGetParam
                                        (0103) export  UART_szGetRestOfParams
                                        (0104) export _UART_szGetRestOfParams
                                        (0105) ENDIF
                                        (0106) 
                                        (0107) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0108) ; WARNING WARNING WARNING
                                        (0109) ; The following exports are for backwards compatibility only and should
                                        (0110) ; not be used for new designs. They may be eliminated in a future release.
                                        (0111) ; Their status is "NO FURTHER MAINTENANCE". 
                                        (0112) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0113) export  bUART_ReadTxStatus
                                        (0114) export _bUART_ReadTxStatus
                                        (0115) export  bUART_ReadRxData
                                        (0116) export _bUART_ReadRxData
                                        (0117) export  bUART_ReadRxStatus
                                        (0118) export _bUART_ReadRxStatus
                                        (0119) 	
                                        (0120) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0121) ;             END WARNING
                                        (0122) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0123) 
                                        (0124) ;-----------------------------------------------
                                        (0125) ; Variable Allocation
                                        (0126) ;-----------------------------------------------
                                        (0127) IF (UART_RXBUF_ENABLE)
                                        (0128)     
                                        (0129) area UART_RAM (RAM, REL, CON)
                                        (0130)     
                                        (0131)  ptrParam:   BLK  1
                                        (0132) 
                                        (0133) ENDIF
                                        (0134) 
                                        (0135) area text (ROM,REL)
                                        (0136) 
                                        (0137) ;-----------------------------------------------
                                        (0138) ;  EQUATES
                                        (0139) ;-----------------------------------------------
                                        (0140) bfCONTROL_REG_START_BIT:        equ    1    ; Control register start bit
                                        (0141) bfFUNCTION_REG_TX_INT_MODE_BIT: equ 0x10    ; the TX Int Mode bit
                                        (0142) 
                                        (0143) area UserModules (ROM, REL, CON)
                                        (0144) 
                                        (0145) ;=============================================================================
                                        (0146) ;=============================================================================
                                        (0147) ;
                                        (0148) ;     Low-Level Commands
                                        (0149) ;
                                        (0150) ;=============================================================================
                                        (0151) ;=============================================================================
                                        (0152) 
                                        (0153) .SECTION
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;  FUNCTION NAME: UART_EnableInt
                                        (0156) ;
                                        (0157) ;  DESCRIPTION:
                                        (0158) ;     Enables this UART's interrupt by setting the interrupt enable mask
                                        (0159) ;     bit associated with this User Module. Remember to call the global
                                        (0160) ;     interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0161) ;-----------------------------------------------------------------------------
                                        (0162) ;
                                        (0163) ;  ARGUMENTS:
                                        (0164) ;     none.
                                        (0165) ;
                                        (0166) ;  RETURNS:
                                        (0167) ;     none.
                                        (0168) ;
                                        (0169) ;  SIDE EFFECTS:
                                        (0170) ;    The A and X registers may be modified by this or future implementations
                                        (0171) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0172) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0173) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0174) ;    functions.
                                        (0175) ;
                                        (0176)  UART_EnableInt:
                                        (0177) _UART_EnableInt:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0179)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0180)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0181)    RAM_EPILOGUE RAM_USE_CLASS_1
05DD: 7F       RET                      (0182)    ret
05DE: 41 E1 FB AND   REG[0xE1],0xFB     
05E1: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185)     
                                        (0186) .SECTION
                                        (0187) ;-----------------------------------------------------------------------------
                                        (0188) ;  FUNCTION NAME: UART_DisableInt
                                        (0189) ;
                                        (0190) ;  DESCRIPTION:
                                        (0191) ;     Disables this UART's interrupt by clearing the interrupt enable mask bit
                                        (0192) ;     associated with this User Module.
                                        (0193) ;-----------------------------------------------------------------------------
                                        (0194) ;
                                        (0195) ;  ARGUMENTS:
                                        (0196) ;     none.
                                        (0197) ;
                                        (0198) ;  RETURNS:
                                        (0199) ;     none.
                                        (0200) ;
                                        (0201) ;  SIDE EFFECTS:
                                        (0202) ;    The A and X registers may be modified by this or future implementations
                                        (0203) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0204) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0205) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0206) ;    functions.
                                        (0207) ;
                                        (0208)  UART_DisableInt:
                                        (0209) _UART_DisableInt:
                                        (0210)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0211)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0212)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0213)    RAM_EPILOGUE RAM_USE_CLASS_1
05E4: 7F       RET                      (0214)    ret
05E5: 71 10    OR    F,0x10             
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) 
                                        (0218) .SECTION
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;  FUNCTION NAME: UART_SetTxIntMode(BYTE bTxIntMode)
                                        (0221) ;
                                        (0222) ;  DESCRIPTION:
                                        (0223) ;     Sets the Tx Interrupt Mode bit in the Function Register.
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;
                                        (0226) ;  ARGUMENTS:
                                        (0227) ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
                                        (0228) ;        Passed in the A register
                                        (0229) ;
                                        (0230) ;  RETURNS:
                                        (0231) ;     none.
                                        (0232) ;
                                        (0233) ;  SIDE EFFECTS:
                                        (0234) ;    The A and X registers may be modified by this or future implementations
                                        (0235) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0236) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0237) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0238) ;    functions.
                                        (0239) ;
                                        (0240) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0241) ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
                                        (0242) ;     on TX register empty or TX transmit complete
                                        (0243) ;
                                        (0244)  UART_SetTxIntMode:
                                        (0245) _UART_SetTxIntMode:
                                        (0246)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0247)    M8C_SetBank1
05E7: 21 01    AND   A,0x1              (0248)    and   A, UART_INT_MODE_TX_COMPLETE
05E9: A0 07    JZ    0x05F1             (0249)    jz    .SetModeRegEmpty
05EB: 43 28 10 OR    REG[0x28],0x10     (0250)    or    REG[UART_TX_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
05EE: 70 EF    AND   F,0xEF             
                                        (0251)    M8C_SetBank0
                                        (0252)    RAM_EPILOGUE RAM_USE_CLASS_1
05F0: 7F       RET                      (0253)    ret
                                        (0254) 
                                        (0255) .SetModeRegEmpty:
05F1: 41 28 EF AND   REG[0x28],0xEF     (0256)    and   REG[UART_TX_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
05F4: 70 EF    AND   F,0xEF             
                                        (0257)    M8C_SetBank0
                                        (0258)    RAM_EPILOGUE RAM_USE_CLASS_1
05F6: 7F       RET                      (0259)    ret
                                        (0260) .ENDSECTION
                                        (0261) 
                                        (0262) 
                                        (0263) .SECTION
                                        (0264) ;-----------------------------------------------------------------------------
                                        (0265) ;  FUNCTION NAME: UART_Start(BYTE bParity)
                                        (0266) ;
                                        (0267) ;  DESCRIPTION:
                                        (0268) ;     Sets the start bit and parity in the Control register of this user module.
                                        (0269) ;-----------------------------------------------------------------------------
                                        (0270) ;
                                        (0271) ;  ARGUMENTS:
                                        (0272) ;     BYTE bParity - parity setting for the Transmitter and receiver. Use defined masks.
                                        (0273) ;        Passed in the A register.
                                        (0274) ;
                                        (0275) ;  RETURNS:
                                        (0276) ;     none.
                                        (0277) ;
                                        (0278) ;  SIDE EFFECTS:
                                        (0279) ;    The A and X registers may be modified by this or future implementations
                                        (0280) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0281) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0282) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0283) ;    functions.
                                        (0284) ;
                                        (0285)  UART_Start:
                                        (0286) _UART_Start:
                                        (0287)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0288)    ; Note, Proxy Class 4 only if receive buffer used; otherwise Proxy Class 1.
                                        (0289) 
05F7: 29 01    OR    A,0x1              (0290)    or    A, bfCONTROL_REG_START_BIT
05F9: 60 2B    MOV   REG[0x2B],A        (0291)    mov   REG[UART_TX_CONTROL_REG], A
05FB: 60 2F    MOV   REG[0x2F],A        (0292)    mov   REG[UART_RX_CONTROL_REG], A
                                        (0293) IF ( UART_RXBUF_ENABLE )
                                        (0294)    call  _UART_CmdReset
                                        (0295) ENDIF
                                        (0296)    RAM_EPILOGUE RAM_USE_CLASS_1
05FD: 7F       RET                      (0297)    ret
                                        (0298) .ENDSECTION
                                        (0299) 
                                        (0300) 
                                        (0301) .SECTION
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;  FUNCTION NAME: UART_Stop
                                        (0304) ;
                                        (0305) ;  DESCRIPTION:
                                        (0306) ;     Disables UART operation.
                                        (0307) ;-----------------------------------------------------------------------------
                                        (0308) ;
                                        (0309) ;  ARGUMENTS:
                                        (0310) ;     none.
                                        (0311) ;
                                        (0312) ;  RETURNS:
                                        (0313) ;     none.
                                        (0314) ;
                                        (0315) ;  SIDE EFFECTS:
                                        (0316) ;    The A and X registers may be modified by this or future implementations
                                        (0317) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0318) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0319) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0320) ;    functions.
                                        (0321) ;
                                        (0322)  UART_Stop:
                                        (0323) _UART_Stop:
                                        (0324)    RAM_PROLOGUE RAM_USE_CLASS_1
05FE: 41 2B FE AND   REG[0x2B],0xFE     (0325)    and   REG[UART_TX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
0601: 41 2F FE AND   REG[0x2F],0xFE     (0326)    and   REG[UART_RX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0327)    RAM_EPILOGUE RAM_USE_CLASS_1
0604: 7F       RET                      (0328)    ret
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) 
                                        (0332) .SECTION
                                        (0333) ;-----------------------------------------------------------------------------
                                        (0334) ;  FUNCTION NAME: UART_SendData
                                        (0335) ;
                                        (0336) ;  DESCRIPTION:
                                        (0337) ;     Initiates a transmission of data.
                                        (0338) ;-----------------------------------------------------------------------------
                                        (0339) ;
                                        (0340) ;  ARGUMENTS:
                                        (0341) ;     BYTE  TxData - data to transmit. PASSED in A register.
                                        (0342) ;
                                        (0343) ;  RETURNS:
                                        (0344) ;     none.
                                        (0345) ;
                                        (0346) ;  SIDE EFFECTS:
                                        (0347) ;    The A and X registers may be modified by this or future implementations
                                        (0348) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0349) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0350) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0351) ;    functions.
                                        (0352) ;
                                        (0353)  UART_SendData:
                                        (0354) _UART_SendData:
                                        (0355)    RAM_PROLOGUE RAM_USE_CLASS_1
0605: 60 29    MOV   REG[0x29],A        (0356)    mov REG[UART_TX_BUFFER_REG], A
                                        (0357)    RAM_EPILOGUE RAM_USE_CLASS_1
0607: 7F       RET                      (0358)    ret
                                        (0359) .ENDSECTION
                                        (0360) 
                                        (0361) 
                                        (0362) .SECTION
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;  FUNCTION NAME: UART_bReadTxStatus
                                        (0365) ;
                                        (0366) ;  DESCRIPTION:
                                        (0367) ;     Reads the Tx Status bits in the Control/Status register.
                                        (0368) ;-----------------------------------------------------------------------------
                                        (0369) ;
                                        (0370) ;  ARGUMENTS:
                                        (0371) ;     none.
                                        (0372) ;
                                        (0373) ;  RETURNS:
                                        (0374) ;     BYTE  bTxStatus - transmit status data.  Use defined masks for detecting
                                        (0375) ;           status bits (returned in A)
                                        (0376) ;
                                        (0377) ;  SIDE EFFECTS:
                                        (0378) ;    The A and X registers may be modified by this or future implementations
                                        (0379) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0380) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0381) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0382) ;    functions.
                                        (0383) ;
                                        (0384)  UART_bReadTxStatus:
                                        (0385) _UART_bReadTxStatus:
                                        (0386)  bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0387) _bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0388)    RAM_PROLOGUE RAM_USE_CLASS_1
0608: 5D 2B    MOV   A,REG[0x2B]        (0389)    mov A,  REG[UART_TX_CONTROL_REG]
                                        (0390)    RAM_EPILOGUE RAM_USE_CLASS_1
060A: 7F       RET                      (0391)    ret
                                        (0392) .ENDSECTION
                                        (0393) 
                                        (0394) 
                                        (0395) .SECTION
                                        (0396) ;-----------------------------------------------------------------------------
                                        (0397) ;  FUNCTION NAME: UART_bReadRxData
                                        (0398) ;
                                        (0399) ;  DESCRIPTION:
                                        (0400) ;     Reads the RX buffer register.  Should check the status regiser to make
                                        (0401) ;     sure data is valid.
                                        (0402) ;-----------------------------------------------------------------------------
                                        (0403) ;
                                        (0404) ;  ARGUMENTS:
                                        (0405) ;     none.
                                        (0406) ;
                                        (0407) ;  RETURNS:
                                        (0408) ;     bRxData - returned in A.
                                        (0409) ;
                                        (0410) ;  SIDE EFFECTS:
                                        (0411) ;    The A and X registers may be modified by this or future implementations
                                        (0412) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0413) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0414) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0415) ;    functions.
                                        (0416) ;
                                        (0417)  UART_bReadRxData:
                                        (0418) _UART_bReadRxData:
                                        (0419)  bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0420) _bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0421)    RAM_PROLOGUE RAM_USE_CLASS_1
060B: 5D 2E    MOV   A,REG[0x2E]        (0422)    mov A, REG[UART_RX_BUFFER_REG]
                                        (0423)    RAM_EPILOGUE RAM_USE_CLASS_1
060D: 7F       RET                      (0424)    ret
                                        (0425) .ENDSECTION
                                        (0426) 
                                        (0427) 
                                        (0428) .SECTION
                                        (0429) ;-----------------------------------------------------------------------------
                                        (0430) ;  FUNCTION NAME: UART_bReadRxStatus
                                        (0431) ;
                                        (0432) ;  DESCRIPTION:
                                        (0433) ;     Reads the RX Status bits in the Control/Status register.
                                        (0434) ;-----------------------------------------------------------------------------
                                        (0435) ;
                                        (0436) ;  ARGUMENTS:
                                        (0437) ;     none.
                                        (0438) ;
                                        (0439) ;  RETURNS:
                                        (0440) ;     BYTE  bRXStatus - receive status data.  Use the following defined bits
                                        (0441) ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
                                        (0442) ;           returned in A.
                                        (0443) ;
                                        (0444) ;  SIDE EFFECTS:
                                        (0445) ;    The A and X registers may be modified by this or future implementations
                                        (0446) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0447) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0448) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0449) ;    functions.
                                        (0450) ;
                                        (0451)  UART_bReadRxStatus:
                                        (0452) _UART_bReadRxStatus:
                                        (0453)  bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0454) _bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0455)    RAM_PROLOGUE RAM_USE_CLASS_1
060E: 5D 2F    MOV   A,REG[0x2F]        (0456)    mov A,  REG[UART_RX_CONTROL_REG]
                                        (0457)    RAM_EPILOGUE RAM_USE_CLASS_1
0610: 7F       RET                      (0458)    ret
                                        (0459) .ENDSECTION
                                        (0460) 
                                        (0461) 
                                        (0462) .SECTION
                                        (0463) ;-----------------------------------------------------------------------------
                                        (0464) ;  FUNCTION NAME: UART_TxIntMode
                                        (0465) ;
                                        (0466) ;  DESCRIPTION:
                                        (0467) ;     This function is used to change the TX Interrupt mode.
                                        (0468) ;-----------------------------------------------------------------------------
                                        (0469) ;
                                        (0470) ;  ARGUMENTS:
                                        (0471) ;     A => Tx Interrupt mode
                                        (0472) ;             0 => Interrupt on TX_Reg_Empty  (Default)
                                        (0473) ;             1 => Interrupt on TX Complete
                                        (0474) ;
                                        (0475) ;  RETURNS:
                                        (0476) ;     none.
                                        (0477) ;
                                        (0478) ;  SIDE EFFECTS:
                                        (0479) ;    The A and X registers may be modified by this or future implementations
                                        (0480) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0481) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0482) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0483) ;    functions.
                                        (0484) ;
                                        (0485)  UART_TxIntMode:
                                        (0486) _UART_TxIntMode:
                                        (0487)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0488) 
0611: 21 01    AND   A,0x1              (0489)    and  A,UART_INT_MODE_TX_COMPLETE
0613: 71 10    OR    F,0x10             
                                        (0490)    M8C_SetBank1
0615: 39 01    CMP   A,0x1              (0491)    cmp  A,UART_INT_MODE_TX_COMPLETE
0617: A0 06    JZ    0x061E             (0492)    jz   .SetTxCmpMode
                                        (0493) 
0619: 41 28 EF AND   REG[0x28],0xEF     (0494)    and  reg[UART_TX_FUNC_REG],0xEF               ; Set Interrupt on Tx_Reg_Empty
061C: 80 04    JMP   0x0621             (0495)    jmp  .TxIntMode_End
                                        (0496) 
                                        (0497) .SetTxCmpMode:                                       ; Set Interrupt on TX Complete
061E: 43 28 10 OR    REG[0x28],0x10     (0498)    or   reg[UART_TX_FUNC_REG],0x10
0621: 70 EF    AND   F,0xEF             
                                        (0499) 
                                        (0500) .TxIntMode_End:
                                        (0501)    M8C_SetBank0
                                        (0502)    RAM_EPILOGUE RAM_USE_CLASS_1
0623: 7F       RET                      (0503)    ret
                                        (0504) .ENDSECTION
                                        (0505) 
                                        (0506)     
                                        (0507) .SECTION
                                        (0508) ;-----------------------------------------------------------------------------
                                        (0509) ;  FUNCTION NAME: UART_IntCntl
                                        (0510) ;
                                        (0511) ;  DESCRIPTION:
                                        (0512) ;     This function is used to enable/disable the Rx and Tx interrupt.
                                        (0513) ;-----------------------------------------------------------------------------
                                        (0514) ;
                                        (0515) ;  ARGUMENTS:
                                        (0516) ;     A => Interrupt mask
                                        (0517) ;
                                        (0518) ;  RETURNS:
                                        (0519) ;     none.
                                        (0520) ;
                                        (0521) ;  SIDE EFFECTS:
                                        (0522) ;    The A and X registers may be modified by this or future implementations
                                        (0523) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0524) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0525) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0526) ;    functions.
                                        (0527) ;
                                        (0528) ;  THEORY of OPERATION or PROCEDURE:
                                        (0529) ;     Set or Clears the Tx/Rx user module interrupt enable mask bit in the TX
                                        (0530) ;     and RX block.
                                        (0531) ;
                                        (0532)  UART_IntCntl:
                                        (0533) _UART_IntCntl:
                                        (0534)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0535) 
0624: 08       PUSH  A                  (0536)    push A
0625: 21 01    AND   A,0x1              (0537)    and  A,UART_ENABLE_RX_INT
0627: A0 06    JZ    0x062E             (0538)    jz   .DisRxInt
0629: 43 E1 08 OR    REG[0xE1],0x8      
                                        (0539)      ; Enable Rx Interrupt
                                        (0540)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
062C: 80 04    JMP   0x0631             (0541)    jmp  .CheckTxInt
062E: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0542) .DisRxInt:
                                        (0543)      ; Disable Rx Interrupt
                                        (0544)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0545) 
                                        (0546) .CheckTxInt:
0631: 18       POP   A                  (0547)    pop  A
0632: 21 02    AND   A,0x2              (0548)    and  A,UART_ENABLE_TX_INT
0634: A0 06    JZ    0x063B             (0549)    jz   .DisTxInt
0636: 43 E1 04 OR    REG[0xE1],0x4      
                                        (0550)      ; Enable Tx Interrupt
                                        (0551)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
0639: 80 04    JMP   0x063E             (0552)    jmp  .End_IntCntl
063B: 41 E1 FB AND   REG[0xE1],0xFB     
                                        (0553) .DisTxInt:
                                        (0554)      ; Disable Tx Interrupt
                                        (0555)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0556) 
                                        (0557) .End_IntCntl:
                                        (0558)    RAM_EPILOGUE RAM_USE_CLASS_1
063E: 7F       RET                      (0559)    ret
                                        (0560) .ENDSECTION
                                        (0561) 
                                        (0562) 
                                        (0563) ;=============================================================================
                                        (0564) ;=============================================================================
                                        (0565) ;
                                        (0566) ;     High-Level Commands
                                        (0567) ;
                                        (0568) ;=============================================================================
                                        (0569) ;=============================================================================
                                        (0570) 
                                        (0571) 
                                        (0572) ;-----------------------------------------------------------------------------
                                        (0573) ;  FUNCTION NAME: UART_PutSHexByte
                                        (0574) ;
                                        (0575) ;  DESCRIPTION:
                                        (0576) ;     Print a byte in Hex (two characters) to the UART Tx
                                        (0577) ;-----------------------------------------------------------------------------
                                        (0578) ;
                                        (0579) ;  ARGUMENTS:
                                        (0580) ;     A  => (BYTE) Data/char to be printed
                                        (0581) ;
                                        (0582) ;  RETURNS:
                                        (0583) ;     none.
                                        (0584) ;
                                        (0585) ;  SIDE EFFECTS:
                                        (0586) ;    The A and X registers may be modified by this or future implementations
                                        (0587) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0588) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0589) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0590) ;    functions.
                                        (0591) ;
                                        (0592) .LITERAL
                                        (0593) UART_HEX_STR:
                                        (0594)      DS    "0123456789ABCDEF"
                                        (0595) .ENDLITERAL
                                        (0596) 
                                        (0597) .SECTION
                                        (0598)  UART_PutSHexByte:
                                        (0599) _UART_PutSHexByte:
                                        (0600)    RAM_PROLOGUE RAM_USE_CLASS_1
064F: 08       PUSH  A                  (0601)    push  A                             ; Save lower nibble
0650: 67       ASR   A                  (0602)    asr   A                             ; Shift high nibble to right
0651: 67       ASR   A                  (0603)    asr   A
0652: 67       ASR   A                  (0604)    asr   A
0653: 67       ASR   A                  (0605)    asr   A
0654: 21 0F    AND   A,0xF              (0606)    and   A,0Fh                         ; Mask off nibble
0656: FF E7    INDEX 0x063F             (0607)    index UART_HEX_STR                  ; Get Hex value
0658: 90 0F    CALL  _UART_PutChar      (0608)    call  UART_PutChar                  ; Write data to screen
065A: 18       POP   A                  (0609)    pop   A                             ; Restore value
065B: 21 0F    AND   A,0xF              (0610)    and   A,0Fh                         ; Mask off lower nibble
065D: FF E0    INDEX 0x063F             (0611)    index UART_HEX_STR                  ; Get Hex value
065F: 90 08    CALL  _UART_PutChar      (0612)    call  UART_PutChar                  ; Write data to screen
                                        (0613)    RAM_EPILOGUE RAM_USE_CLASS_1
0661: 7F       RET                      (0614)    ret
                                        (0615) .ENDSECTION
                                        (0616) 
                                        (0617) 
                                        (0618) .SECTION
                                        (0619) ;-----------------------------------------------------------------------------
                                        (0620) ;  FUNCTION NAME: UART_PutSHexInt
                                        (0621) ;
                                        (0622) ;  DESCRIPTION:
                                        (0623) ;     Print an Int in Hex (four characters) to UART Tx
                                        (0624) ;-----------------------------------------------------------------------------
                                        (0625) ;
                                        (0626) ;  ARGUMENTS:
                                        (0627) ;     Pointer to string
                                        (0628) ;     A  => ASB of Int
                                        (0629) ;     X  => MSB of Int
                                        (0630) ;
                                        (0631) ;  RETURNS:
                                        (0632) ;     none.
                                        (0633) ;
                                        (0634) ;  SIDE EFFECTS:
                                        (0635) ;    The A and X registers may be modified by this or future implementations
                                        (0636) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0637) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0638) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0639) ;    functions.
                                        (0640) ;
                                        (0641) 
                                        (0642)  UART_PutSHexInt:
                                        (0643) _UART_PutSHexInt:
                                        (0644)    RAM_PROLOGUE RAM_USE_CLASS_1
0662: 4B       SWAP  A,X                (0645)    swap  A,X
0663: 9F EA    CALL  _UART_PutSHexByte  (0646)    call  UART_PutSHexByte              ; Print MSB
0665: 5B       MOV   A,X                (0647)    mov   A,X                           ; Move LSB into position
0666: 9F E7    CALL  _UART_PutSHexByte  (0648)    call  UART_PutSHexByte              ; Print LSB
                                        (0649)    RAM_EPILOGUE RAM_USE_CLASS_1
0668: 7F       RET                      (0650)    ret
0669: 49 2B 10 TST   REG[0x2B],0x10     
066C: AF FC    JZ    _UART_PutChar      
066E: 60 29    MOV   REG[0x29],A        
                                        (0651) .ENDSECTION
                                        (0652) 
                                        (0653) 
                                        (0654) .SECTION
                                        (0655) ;-----------------------------------------------------------------------------
                                        (0656) ;  FUNCTION NAME: UART_PutChar
                                        (0657) ;
                                        (0658) ;  DESCRIPTION:
                                        (0659) ;     Send character out through UART TX port.
                                        (0660) ;-----------------------------------------------------------------------------
                                        (0661) ;
                                        (0662) ;  ARGUMENTS:
                                        (0663) ;     A has Character to send to UART Tx Port
                                        (0664) ;
                                        (0665) ;  RETURNS:
                                        (0666) ;     none
                                        (0667) ;
                                        (0668) ;  SIDE EFFECTS:
                                        (0669) ;    The A and X registers may be modified by this or future implementations
                                        (0670) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0671) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0672) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0673) ;    functions.
                                        (0674) ;
                                        (0675) 
                                        (0676)    macro InLinePutChar( Source )
                                        (0677) .BufEmptyWaitLoop:
                                        (0678)    tst REG[UART_TX_CONTROL_REG], UART_TX_BUFFER_EMPTY     ; Check Tx Status
                                        (0679)    jz  .BufEmptyWaitLoop
                                        (0680)    mov REG[UART_TX_BUFFER_REG], @Source          ; Write data to Tx Port
                                        (0681)    endm
                                        (0682) 
                                        (0683)  UART_PutChar:
                                        (0684) _UART_PutChar:
                                        (0685)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0686)    InLinePutChar A
                                        (0687)    RAM_EPILOGUE RAM_USE_CLASS_1
0670: 7F       RET                      (0688)    ret
                                        (0689) .ENDSECTION
                                        (0690) 
                                        (0691) 
                                        (0692) .SECTION
                                        (0693) ;-----------------------------------------------------------------------------
                                        (0694) ;  FUNCTION NAME: UART_cGetChar
                                        (0695) ;
                                        (0696) ;  DESCRIPTION:
                                        (0697) ;     Read character from UART RX port.
                                        (0698) ;-----------------------------------------------------------------------------
                                        (0699) ;
                                        (0700) ;  ARGUMENTS:
                                        (0701) ;      none
                                        (0702) ;
                                        (0703) ;  RETURNS:
                                        (0704) ;     char that is returned from UART
                                        (0705) ;
                                        (0706) ;  SIDE EFFECTS:
                                        (0707) ;    The A and X registers may be modified by this or future implementations
                                        (0708) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0709) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0710) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0711) ;    functions.
                                        (0712) ;
                                        (0713) ;    Program flow will stay in this function until a character is received.
                                        (0714) ;    If the watchdog timer is used, care must be taken to make sure that
                                        (0715) ;    the delay between characters is less than the watchdog timeout.
                                        (0716) ;
                                        (0717)  UART_cGetChar:
                                        (0718) _UART_cGetChar:
                                        (0719)    RAM_PROLOGUE RAM_USE_CLASS_1
0671: 49 2F 08 TST   REG[0x2F],0x8      (0720)    tst REG[UART_RX_CONTROL_REG],UART_RX_REG_FULL    ; Check if a character is ready
0674: AF FC    JZ    _UART_cGetChar     (0721)    jz  UART_cGetChar                             ; If not loop
0676: 5D 2E    MOV   A,REG[0x2E]        (0722)    mov A, REG[UART_RX_BUFFER_REG]                ; Get character
                                        (0723)    RAM_EPILOGUE RAM_USE_CLASS_1
0678: 7F       RET                      (0724)    ret
                                        (0725) .ENDSECTION
                                        (0726) 
                                        (0727) 
                                        (0728) .SECTION
                                        (0729) ;-----------------------------------------------------------------------------
                                        (0730) ;  FUNCTION NAME: UART_cReadChar
                                        (0731) ;
                                        (0732) ;  DESCRIPTION:
                                        (0733) ;     Read character from UART RX port.
                                        (0734) ;-----------------------------------------------------------------------------
                                        (0735) ;
                                        (0736) ;  ARGUMENTS:
                                        (0737) ;      none
                                        (0738) ;
                                        (0739) ;  RETURNS:
                                        (0740) ;     char that is returned from UART
                                        (0741) ;
                                        (0742) ;  SIDE EFFECTS:
                                        (0743) ;    The A and X registers may be modified by this or future implementations
                                        (0744) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0745) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0746) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0747) ;    functions.
                                        (0748) ;
                                        (0749) ;    A valid 0x00 character will be ignored, since a 0x00 return value
                                        (0750) ;    implies a valid character or an error condition occured.
                                        (0751) ;
                                        (0752)  UART_cReadChar:
                                        (0753) _UART_cReadChar:
                                        (0754)    RAM_PROLOGUE RAM_USE_CLASS_1
0679: 5D 2F    MOV   A,REG[0x2F]        (0755)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
067B: 08       PUSH  A                  (0756)    push A
067C: 21 08    AND   A,0x8              (0757)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
067E: B0 04    JNZ   0x0683             (0758)    jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
0680: 18       POP   A                  (0759)    pop  A
0681: 80 0B    JMP   0x068D             (0760)    jmp  .RX_NO_VALID_CHAR
                                        (0761) 
                                        (0762) .RX_DATA_RDY:
0683: 5D 2E    MOV   A,REG[0x2E]        (0763)    mov  A,REG[UART_RX_BUFFER_REG ]          
0685: 4B       SWAP  A,X                (0764)    swap A,X                                                ; determine if data is valid
                                        (0765) 
0686: 18       POP   A                  (0766)    pop  A                                                  ; Check for errors
0687: 21 A0    AND   A,0xA0             (0767)    and  A,(UART_RX_PARITY_ERROR | UART_RX_FRAMING_ERROR)
0689: B0 03    JNZ   0x068D             (0768)    jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
068B: 4B       SWAP  A,X                (0769)    swap A,X                                                ; Put data in A and exit
                                        (0770)    RAM_EPILOGUE RAM_USE_CLASS_1
068C: 7F       RET                      (0771)    ret
                                        (0772) 
                                        (0773) .RX_NO_VALID_CHAR:
068D: 50 00    MOV   A,0x0              (0774)    mov A,0x00                                              ; Zero out character
                                        (0775) 
                                        (0776)  End_UART_cReadChar:
                                        (0777)    RAM_EPILOGUE RAM_USE_CLASS_1
068F: 7F       RET                      (0778)    ret
                                        (0779) .ENDSECTION
                                        (0780) 
                                        (0781) 
                                        (0782) .SECTION
                                        (0783) ;-----------------------------------------------------------------------------
                                        (0784) ;  FUNCTION NAME: UART_iReadChar
                                        (0785) ;
                                        (0786) ;  WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
                                        (0787) ;  to just set a value in the upper byte if error conditions exists.
                                        (0788) ;
                                        (0789) ;  DESCRIPTION:
                                        (0790) ;     Read character from UART RX port.
                                        (0791) ;-----------------------------------------------------------------------------
                                        (0792) ;
                                        (0793) ;  ARGUMENTS:
                                        (0794) ;      none
                                        (0795) ;
                                        (0796) ;  RETURNS:
                                        (0797) ;     An integer value is returned.  A negative value inplies and error
                                        (0798) ;     condition, a positive value between 0 and 255 is the return character.
                                        (0799) ;
                                        (0800) ;     Error Codes:
                                        (0801) ;        0x80CC    Parity Error
                                        (0802) ;        0x40CC    Overrun Error
                                        (0803) ;        0x20CC    Framing Error
                                        (0804) ;        0x01CC    No Data available
                                        (0805) ;
                                        (0806) ;  SIDE EFFECTS:
                                        (0807) ;    The A and X registers may be modified by this or future implementations
                                        (0808) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0809) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0810) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0811) ;    functions.
                                        (0812) ;
                                        (0813)  UART_iReadChar:
                                        (0814) _UART_iReadChar:
                                        (0815)    RAM_PROLOGUE RAM_USE_CLASS_1
0690: 5D 2F    MOV   A,REG[0x2F]        (0816)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
                                        (0817)                                                            ; Mask only errors and data ready
0692: 21 E8    AND   A,0xE8             (0818)    and  A,(UART_RX_ERROR|UART_RX_REG_FULL)
0694: 08       PUSH  A                  (0819)    push A
0695: 21 08    AND   A,0x8              (0820)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
0697: B0 07    JNZ   0x069F             (0821)    jnz  .RX_GET_DATA                                       ; Data Ready go read it.
0699: 18       POP   A                  (0822)    pop  A
069A: 29 01    OR    A,0x1              (0823)    or   A,UART_RX_NO_DATA                                  ; Add no data flag
069C: 4B       SWAP  A,X                (0824)    swap A,X
069D: 80 07    JMP   0x06A5             (0825)    jmp  End_UART_iReadChar
                                        (0826) 
                                        (0827) .RX_GET_DATA:
069F: 18       POP   A                  (0828)    pop  A
06A0: 21 E0    AND   A,0xE0             (0829)    and  A,UART_RX_ERROR
06A2: 4B       SWAP  A,X                (0830)    swap A,X
06A3: 5D 2E    MOV   A,REG[0x2E]        (0831)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read data first, then
                                        (0832)                                                            ; determine if data is valid
                                        (0833) 
                                        (0834)  End_UART_iReadChar:
                                        (0835)    RAM_EPILOGUE RAM_USE_CLASS_1
06A5: 7F       RET                      (0836)    ret
06A6: 70 BF    AND   F,0xBF             
06A8: 60 D3    MOV   REG[0xD3],A        
                                        (0837) .ENDSECTION
                                        (0838) 
                                        (0839) 
                                        (0840) .SECTION
                                        (0841) ;-----------------------------------------------------------------------------
                                        (0842) ;  FUNCTION NAME: UART_PutString
                                        (0843) ;
                                        (0844) ;  DESCRIPTION:
                                        (0845) ;     Send String out through UART TX port.
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS:
                                        (0849) ;     Pointer to String
                                        (0850) ;     A has MSB of string address
                                        (0851) ;     X has LSB of string address
                                        (0852) ;
                                        (0853) ;  RETURNS:
                                        (0854) ;     none
                                        (0855) ;
                                        (0856) ;  SIDE EFFECTS:
                                        (0857) ;    The A and X registers may be modified by this or future implementations
                                        (0858) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0859) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0860) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0861) ;    functions.
                                        (0862) ;          
                                        (0863) ;    Currently only the page pointer registers listed below are modified: 
                                        (0864) ;          IDX_PP
                                        (0865) ;
                                        (0866)  UART_PutString:
                                        (0867) _UART_PutString:
                                        (0868)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0869)    RAM_SETPAGE_IDX A
                                        (0870) .PutStringLoop:
06AA: 52 00    MOV   A,[X+0]            (0871)    mov   A,[X]                                   ; Get value pointed to by X
06AC: A0 06    JZ    0x06B3             (0872)    jz    End_PutString                           ; Check for end of string
06AE: 9F B9    CALL  _UART_PutChar      (0873)    call  UART_PutChar                            ; Send character to Tx port
06B0: 75       INC   X                  (0874)    inc   X                                       ; Advance pointer to next character
06B1: 8F F8    JMP   0x06AA             (0875)    jmp   .PutStringLoop                          ; Get next character
06B3: 70 3F    AND   F,0x3F             
06B5: 71 C0    OR    F,0xC0             
                                        (0876) 
                                        (0877) End_PutString:
                                        (0878)    RAM_EPILOGUE RAM_USE_CLASS_3
06B7: 7F       RET                      (0879)    ret
06B8: 70 BF    AND   F,0xBF             
06BA: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0880) .ENDSECTION
                                        (0881)     
                                        (0882) .SECTION
                                        (0883) ;-----------------------------------------------------------------------------
                                        (0884) ;  FUNCTION NAME: UART_Write
                                        (0885) ;
                                        (0886) ;  DESCRIPTION:
                                        (0887) ;     Send String of length X to serial port
                                        (0888) ;-----------------------------------------------------------------------------
                                        (0889) ;
                                        (0890) ;  ARGUMENTS:
                                        (0891) ;     Pointer to String
                                        (0892) ;     [SP-5] Count of characters to send
                                        (0893) ;     [SP-4] has MSB of string address
                                        (0894) ;     [SP-3] has LSB of string address
                                        (0895) ;
                                        (0896) ;  RETURNS:
                                        (0897) ;     none
                                        (0898) ;
                                        (0899) ;  SIDE EFFECTS:
                                        (0900) ;    The A and X registers may be modified by this or future implementations
                                        (0901) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0902) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0903) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0904) ;    functions.
                                        (0905) ;          
                                        (0906) ;    Currently only the page pointer registers listed below are modified: 
                                        (0907) ;          IDX_PP
                                        (0908) ;
                                        (0909) CNT_LEN:    equ -5                               ; Length of data to send
                                        (0910) STR_MSB:    equ -4                               ; MSB pointer of string 
                                        (0911) STR_LSB:    equ -3                               ; LSB pointer of string 
                                        (0912) 
                                        (0913)  UART_Write:
                                        (0914) _UART_Write:
                                        (0915)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0916)    RAM_SETPAGE_IDX2STK                           ; Refer indexed addrs to the stack
06BD: 4F       MOV   X,SP               (0917)    mov   X, SP                                   ; Establish the frame pointer 
                                        (0918) 
                                        (0919) .NextByteLoop:
06BE: 52 FB    MOV   A,[X-5]            (0920)    mov   A, [X+CNT_LEN]                          ; End of the string?
06C0: A0 1A    JZ    0x06DB             (0921)    jz    .End_Write                              ;   Yes, prepare to exit
06C2: 7B FB    DEC   [X-5]              (0922)    dec   [X+CNT_LEN]                             ; Decrement counter
                                        (0923) 
                                        (0924)    IF SYSTEM_LARGE_MEMORY_MODEL
06C4: 52 FC    MOV   A,[X-4]            (0925)    mov   A, [X+STR_MSB]                          ; Load pointer to char to send
                                        (0926)    ENDIF
                                        (0927) 
06C6: 59 FD    MOV   X,[X-3]            (0928)    mov   X, [X+STR_LSB]                          ; Load pointer to char to send
06C8: 60 D3    MOV   REG[0xD3],A        
                                        (0929)    RAM_SETPAGE_IDX A                             ; switch index pages
06CA: 52 00    MOV   A,[X+0]            (0930)    mov   A, [X]                                  ; Grab the data
06CC: 49 2B 10 TST   REG[0x2B],0x10     
06CF: AF FC    JZ    0x06CC             
06D1: 60 29    MOV   REG[0x29],A        
                                        (0931)    InLinePutChar A                               ; Put data in empty TX buf reg
06D3: 4F       MOV   X,SP               (0932)    mov   X, SP                                   ; Recover frame pointer
06D4: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0933)    RAM_SETPAGE_IDX2STK                           ; Prepare for stack access
06D7: 77 FD    INC   [X-3]              (0934)    inc   [X+STR_LSB]                             ; Point to next byte, but do not
06D9: 8F E4    JMP   0x06BE             (0935)    jmp   .NextByteLoop                           ;    cross RAM page boundary!
06DB: 70 3F    AND   F,0x3F             
06DD: 71 C0    OR    F,0xC0             
                                        (0936) 
                                        (0937) .End_Write:
                                        (0938)    RAM_EPILOGUE RAM_USE_CLASS_3
06DF: 7F       RET                      (0939)    ret
                                        (0940) .ENDSECTION
                                        (0941)     
                                        (0942) 
                                        (0943) .SECTION
                                        (0944) ;-----------------------------------------------------------------------------
                                        (0945) ;  FUNCTION NAME: UART_CWrite
                                        (0946) ;
                                        (0947) ;             WARNING WARNING NOT COMPLETE
                                        (0948) ;
                                        (0949) ;  DESCRIPTION:
                                        (0950) ;     Send String of length X to serial port
                                        (0951) ;-----------------------------------------------------------------------------
                                        (0952) ;
                                        (0953) ;  ARGUMENTS:
                                        (0954) ;     [SP-4] MSB of Count of character to send
                                        (0955) ;     [SP-3] LSB of Count of character to send
                                        (0956) ;     [SP-2] has MSB of string address
                                        (0957) ;     [SP-1] has LSB of string address
                                        (0958) ;
                                        (0959) ;  RETURNS:
                                        (0960) ;     none
                                        (0961) ;
                                        (0962) ;  SIDE EFFECTS:
                                        (0963) ;    The A and X registers may be modified by this or future implementations
                                        (0964) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0965) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0966) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0967) ;    functions.
                                        (0968) ;
                                        (0969) CLEN_MSB:   equ -6           ; MSB Length of data to send
                                        (0970) CLEN_LSB:   equ -5           ; LSB Length of data to send
                                        (0971) CSTR_MSB:   equ -4           ; MSB pointer of string
                                        (0972) CSTR_LSB:   equ -3           ; LSB pointer of string
                                        (0973) 
                                        (0974)  UART_CWrite:
                                        (0975) _UART_CWrite:
                                        (0976)    RAM_PROLOGUE RAM_USE_CLASS_2
06E0: 4F       MOV   X,SP               (0977)    mov   X,SP
                                        (0978) .CW_Loop:
06E1: 3D FA 00 CMP   [X-6],0x0          (0979)    cmp   [X+CLEN_MSB],0x00                  ; Check for zero counter
06E4: B0 06    JNZ   0x06EB             (0980)    jnz   .CW_WRITEIT
06E6: 3D FB 00 CMP   [X-5],0x0          (0981)    cmp   [X+CLEN_LSB],0x00
06E9: A0 1D    JZ    0x0707             (0982)    jz    .End_CWrite                        ; Leave if done
                                        (0983) 
                                        (0984) .CW_WRITEIT:                                
06EB: 10       PUSH  X                  (0985)    push  X                                  ; Save frame pointer
06EC: 52 FC    MOV   A,[X-4]            (0986)    mov   A,[X+CSTR_MSB]
06EE: 59 FD    MOV   X,[X-3]            (0987)    mov   X,[X+CSTR_LSB]
06F0: 28       ROMX                     (0988)    romx                                     ; Get character from ROM
06F1: 49 2B 10 TST   REG[0x2B],0x10     
06F4: AF FC    JZ    0x06F1             
06F6: 60 29    MOV   REG[0x29],A        
                                        (0989)    InLinePutChar A                          ; Put data in empty TX buf reg
06F8: 20       POP   X                  (0990)    pop   X                                  ; Restore frame pointer
06F9: 07 FD 01 ADD   [X-3],0x1          (0991)    add   [X+CSTR_LSB],1                     ; Increment the string pointer
06FC: 0F FC 00 ADC   [X-4],0x0          (0992)    adc   [X+CSTR_MSB],0
06FF: 17 FB 01 SUB   [X-5],0x1          (0993)    sub   [X+CLEN_LSB],0x01                  ; Dec the counter
0702: 1F FA 00 SBB   [X-6],0x0          (0994)    sbb   [X+CLEN_MSB],0x00
0705: 8F DB    JMP   0x06E1             (0995)    jmp   .CW_Loop
0707: 70 3F    AND   F,0x3F             
0709: 71 C0    OR    F,0xC0             
                                        (0996) 
                                        (0997) .End_CWrite:
                                        (0998)    RAM_EPILOGUE RAM_USE_CLASS_2
070B: 7F       RET                      (0999)    ret
                                        (1000) .ENDSECTION
                                        (1001) 
                                        (1002) 
                                        (1003) .SECTION
                                        (1004) ;-----------------------------------------------------------------------------
                                        (1005) ;  FUNCTION NAME: UART_CPutString
                                        (1006) ;
                                        (1007) ;  DESCRIPTION:
                                        (1008) ;     Send String out through UART TX port.
                                        (1009) ;-----------------------------------------------------------------------------
                                        (1010) ;
                                        (1011) ;  ARGUMENTS:
                                        (1012) ;     Pointer to String
                                        (1013) ;     A has MSB of string address
                                        (1014) ;     X has LSB of string address
                                        (1015) ;
                                        (1016) ;  RETURNS:
                                        (1017) ;     none
                                        (1018) ;
                                        (1019) ;  SIDE EFFECTS:
                                        (1020) ;    The A and X registers may be modified by this or future implementations
                                        (1021) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1022) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1023) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1024) ;    functions.
                                        (1025) ;
                                        (1026)  UART_CPutString:
                                        (1027) _UART_CPutString:
                                        (1028)    RAM_PROLOGUE RAM_USE_CLASS_1
070C: 08       PUSH  A                  (1029)    push  A                                       ; Store ROM pointer
070D: 10       PUSH  X                  (1030)    push  X
070E: 28       ROMX                     (1031)    romx                                          ; Get character from ROM
070F: A0 0B    JZ    0x071B             (1032)    jz    .End_CPutString
0711: 9F 56    CALL  _UART_PutChar      (1033)    call  UART_PutChar                            ; Print character
0713: 20       POP   X                  (1034)    pop   X
0714: 18       POP   A                  (1035)    pop   A
0715: 75       INC   X                  (1036)    inc   X                                       ; Inc LSB of pointer
0716: DF F5    JNC   _UART_CPutString   (1037)    jnc   UART_CPutString                         ; Check for carry
0718: 74       INC   A                  (1038)    inc   A                                       ; Inc MSB of pointer
0719: 8F F2    JMP   _UART_CPutString   (1039)    jmp   UART_CPutString
                                        (1040) 
                                        (1041) 
                                        (1042) .End_CPutString:
071B: 38 FE    ADD   SP,0xFE            (1043)    add   SP, -2
                                        (1044)    RAM_EPILOGUE RAM_USE_CLASS_1
071D: 7F       RET                      (1045)    ret
                                        (1046) .ENDSECTION
                                        (1047) 
                                        (1048) 
                                        (1049) .SECTION
                                        (1050) ;-----------------------------------------------------------------------------
                                        (1051) ;  FUNCTION NAME: UART_PutCRLF
                                        (1052) ;
                                        (1053) ;  DESCRIPTION:
                                        (1054) ;     Send a CR and LF
                                        (1055) ;-----------------------------------------------------------------------------
                                        (1056) ;
                                        (1057) ;  ARGUMENTS:
                                        (1058) ;     none.
                                        (1059) ;
                                        (1060) ;  RETURNS:
                                        (1061) ;     none.
                                        (1062) ;
                                        (1063) ;  SIDE EFFECTS:
                                        (1064) ;    The A and X registers may be modified by this or future implementations
                                        (1065) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1066) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1067) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1068) ;    functions.
                                        (1069) ;
                                        (1070)  UART_PutCRLF:
                                        (1071) _UART_PutCRLF:
                                        (1072)    RAM_PROLOGUE RAM_USE_CLASS_1
071E: 50 0D    MOV   A,0xD              (1073)    mov  A,0x0D                        ; Send CR
0720: 9F 47    CALL  _UART_PutChar      (1074)    call UART_PutChar
0722: 50 0A    MOV   A,0xA              (1075)    mov  A,0x0A                        ; Send LF
0724: 9F 43    CALL  _UART_PutChar      (1076)    call UART_PutChar
                                        (1077)    RAM_EPILOGUE RAM_USE_CLASS_1
0726: 7F       RET                      (1078)    ret
                                        (1079) .ENDSECTION
                                        (1080) 
                                        (1081) 
                                        (1082) IF (UART_RXBUF_ENABLE)
                                        (1083) ;=============================================================================
                                        (1084) ;=============================================================================
                                        (1085) ;
                                        (1086) ;     Command Buffer commands
                                        (1087) ;
                                        (1088) ;=============================================================================
                                        (1089) ;=============================================================================
                                        (1090) 
                                        (1091) .SECTION
                                        (1092) ;-----------------------------------------------------------------------------
                                        (1093) ;  FUNCTION NAME: UART_CmdReset
                                        (1094) ;
                                        (1095) ;  DESCRIPTION:
                                        (1096) ;     Reset command string and status flags
                                        (1097) ;-----------------------------------------------------------------------------
                                        (1098) ;
                                        (1099) ;  ARGUMENTS:
                                        (1100) ;     none.
                                        (1101) ;
                                        (1102) ;  RETURNS:
                                        (1103) ;     none.
                                        (1104) ;
                                        (1105) ;  SIDE EFFECTS:
                                        (1106) ;    The A and X registers may be modified by this or future implementations
                                        (1107) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1108) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1109) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1110) ;    functions.
                                        (1111) ;          
                                        (1112) ;    Currently only the page pointer registers listed below are modified: 
                                        (1113) ;          CUR_PP
                                        (1114) ;
                                        (1115) ;  THEORY of OPERATION or PROCEDURE:
                                        (1116) ;     Clear the command buffer, command counter, and flag.
                                        (1117) ;
                                        (1118)  UART_CmdReset:
                                        (1119) _UART_CmdReset:
                                        (1120)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1121)    RAM_SETPAGE_CUR >UART_aRxBuffer
                                        (1122)    mov [UART_aRxBuffer], 0x00
                                        (1123)    RAM_SETPAGE_CUR >UART_bRxCnt
                                        (1124)    mov [UART_bRxCnt], 0x00
                                        (1125)    and [UART_fStatus], 0x00
                                        (1126)    RAM_SETPAGE_CUR >ptrParam
                                        (1127)    mov [ptrParam],0x00
                                        (1128)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1129)    ret
                                        (1130) .ENDSECTION
                                        (1131) 
                                        (1132) 
                                        (1133) .SECTION
                                        (1134) ;-----------------------------------------------------------------------------
                                        (1135) ;  FUNCTION NAME: UART_bCmdCheck
                                        (1136) ;
                                        (1137) ;  DESCRIPTION:
                                        (1138) ;     Check to see if valid command in buffer.
                                        (1139) ;-----------------------------------------------------------------------------
                                        (1140) ;
                                        (1141) ;  ARGUMENTS:
                                        (1142) ;     none.
                                        (1143) ;
                                        (1144) ;  RETURNS:
                                        (1145) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1146) ;                     Returns non-zero value in A if command is valid.
                                        (1147) ;
                                        (1148) ;  SIDE EFFECTS:
                                        (1149) ;    The A and X registers may be modified by this or future implementations
                                        (1150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1153) ;    functions.
                                        (1154) ;          
                                        (1155) ;    Currently only the page pointer registers listed below are modified: 
                                        (1156) ;          CUR_PP
                                        (1157) ;
                                        (1158) ;  THEORY of OPERATION or PROCEDURE:
                                        (1159) ;     Read the status and control register.
                                        (1160) ;
                                        (1161)  UART_bCmdCheck:
                                        (1162) _UART_bCmdCheck:
                                        (1163)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1164)    RAM_SETPAGE_CUR >UART_fStatus
                                        (1165)    mov A,  [UART_fStatus]
                                        (1166)    and A, UART_RX_BUF_CMDTERM                    ; Mask off Command status
                                        (1167)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1168)    ret
                                        (1169) .ENDSECTION
                                        (1170)     
                                        (1171) 
                                        (1172) .SECTION
                                        (1173) ;-----------------------------------------------------------------------------
                                        (1174) ;  FUNCTION NAME: UART_bErrCheck
                                        (1175) ;
                                        (1176) ;  DESCRIPTION:
                                        (1177) ;     Check to see if an error has occured since last CmdReset
                                        (1178) ;-----------------------------------------------------------------------------
                                        (1179) ;
                                        (1180) ;  ARGUMENTS:
                                        (1181) ;     none.
                                        (1182) ;
                                        (1183) ;  RETURNS:
                                        (1184) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1185) ;                     Returns non-zero value in A if command is valid.
                                        (1186) ;           0x80 => Parity Error
                                        (1187) ;           0x40 => OverRun Error
                                        (1188) ;           0x20 => Framing Error
                                        (1189) ;           0x10 => Software Buffer OverRun
                                        (1190) ;
                                        (1191) ;  SIDE EFFECTS:
                                        (1192) ;    The A and X registers may be modified by this or future implementations
                                        (1193) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1194) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1195) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1196) ;    functions.
                                        (1197) ;          
                                        (1198) ;    Currently only the page pointer registers listed below are modified: 
                                        (1199) ;          CUR_PP
                                        (1200) ;     Error Status is clear when read.
                                        (1201) ;
                                        (1202) ;  THEORY of OPERATION or PROCEDURE:
                                        (1203) ;     Read RX buffer error status and clear status
                                        (1204) ;
                                        (1205)  UART_bErrCheck:
                                        (1206) _UART_bErrCheck:
                                        (1207)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1208)    RAM_SETPAGE_CUR >UART_fStatus
                                        (1209)    mov A,  [UART_fStatus]
                                        (1210)    and A, UART_RX_BUF_ERROR                      ; Mask off Error status
                                        (1211)    and [UART_fStatus], ~UART_RX_BUF_ERROR
                                        (1212)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1213)    ret
                                        (1214) .ENDSECTION
                                        (1215) 
                                        (1216) .SECTION
                                        (1217) ;-----------------------------------------------------------------------------
                                        (1218) ;  FUNCTION NAME: UART_bCmdLength
                                        (1219) ;
                                        (1220) ;  DESCRIPTION:
                                        (1221) ;     Get length of command string
                                        (1222) ;-----------------------------------------------------------------------------
                                        (1223) ;
                                        (1224) ;  ARGUMENTS:
                                        (1225) ;     none.
                                        (1226) ;
                                        (1227) ;  RETURNS:
                                        (1228) ;     BYTE  bRxCnt    Returns the command length in A.
                                        (1229) ;
                                        (1230) ;  SIDE EFFECTS:
                                        (1231) ;    The A and X registers may be modified by this or future implementations
                                        (1232) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1233) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1234) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1235) ;    functions.
                                        (1236) ;          
                                        (1237) ;    Currently only the page pointer registers listed below are modified: 
                                        (1238) ;          CUR_PP
                                        (1239) ;
                                        (1240)  UART_bCmdLength:
                                        (1241) _UART_bCmdLength:
                                        (1242)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1243)    RAM_SETPAGE_CUR >UART_bRxCnt
                                        (1244)    mov A,  [UART_bRxCnt]
                                        (1245)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1246)    ret
                                        (1247) .ENDSECTION
                                        (1248) 
                                        (1249) 
                                        (1250) .SECTION
                                        (1251) ;-----------------------------------------------------------------------------
                                        (1252) ;  FUNCTION NAME: UART_szGetParam
                                        (1253) ;
                                        (1254) ;  DESCRIPTION:
                                        (1255) ;      Return next parameter from UART Rx buffer
                                        (1256) ;-----------------------------------------------------------------------------
                                        (1257) ;
                                        (1258) ;  ARGUMENTS:  none
                                        (1259) ;
                                        (1260) ;  RETURNS:
                                        (1261) ;     A => MSB of parameter address
                                        (1262) ;     X => LSB of parameter address
                                        (1263) ;
                                        (1264) ;  SIDE EFFECTS:
                                        (1265) ;    The A and X registers may be modified by this or future implementations
                                        (1266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1269) ;    functions.
                                        (1270) ;          
                                        (1271) ;    Currently only the page pointer registers listed below are modified: 
                                        (1272) ;          CUR_PP
                                        (1273) ;          IDX_PP
                                        (1274) ;
                                        (1275) ;     The receive string is modified by placing Null characters at the end
                                        (1276) ;     of each parameter as they are recovered.
                                        (1277) ;
                                        (1278) ;  THEORY OF OPERATION:
                                        (1279) ;     This function is a stateful generator of addresses to the "parameters"
                                        (1280) ;     of an input "Command". It scans the (optional) input buffer and breaks
                                        (1281) ;     each lexically distinct element into a null-terminated string by replacing
                                        (1282) ;     delimiters with nulls, as appropriate. The state of the generator is 
                                        (1283) ;     maintained by the private variable ptrParam, which is a buffer-relative
                                        (1284) ;     offset. The generator is initialized by a call to the function
                                        (1285) ;     UART_CmdReset which resets the entire buffer to the 'empty'
                                        (1286) ;     state. Typically this function, UART_szGetParam, is
                                        (1287) ;     not called until the buffer has been loaded with an entire command
                                        (1288) ;     (See UART_bCmdCheck).
                                        (1289) ;
                                        (1290) ;     Note, there is no special distinction between the "command" and the 
                                        (1291) ;     "parameters". The first non-delimiter character of the buffer---the first
                                        (1292) ;     character of the "command"---is also, for the purposes of this function,
                                        (1293) ;     the first "parameter" to which it returns an address.
                                        (1294) ;
                                        (1295) ;     The value of a delimiter (commonly an ascii space, 0x20 and decimal 32)
                                        (1296) ;     is determined at configuration time by a user module parameter.
                                        (1297) ;
                                        (1298)  UART_szGetParam:
                                        (1299) _UART_szGetParam:
                                        (1300)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1301)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (1302)     
                                        (1303)    RAM_SETPAGE_CUR >ptrParam
                                        (1304)    mov   A, <UART_aRxBuffer                 ; Get address to receive buffer
                                        (1305)    add   A, [ptrParam]                      ; Add string offset
                                        (1306)    mov   X, A
                                        (1307)    RAM_SETPAGE_IDX >UART_aRxBuffer
                                        (1308)    mov   A, [X]                             ; Get character pointed by X
                                        (1309)    jnz   .SkipOverDelimitersLoop            ; Null? No,  continue...
                                        (1310)    push  X                                  ;       Yes, Save LSB of current pointer
                                        (1311)    jmp   .End_GetNextParam
                                        (1312)                                             ; Check for delimiter and keep looping until
                                        (1313)                                             ; all leading delimiters have been found.
                                        (1314) .SkipOverDelimitersLoop:
                                        (1315)    cmp   A, UART_DELIMITER                  ; Do we have a delimiter?
                                        (1316)    jnz   .ParamStartFound                   ;   No,  Bingo! found a parameter
                                        (1317)    inc   X                                  ;   Yes, Increment both index and...
                                        (1318)    inc   [ptrParam]                         ;          the stored pointer.
                                        (1319)    mov   A, [X]                             ; Get character pointed by X
                                        (1320)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; End of buffer?
                                        (1321)    jnz   .SkipOverDelimitersLoop            ;   No,  continue the scan
                                        (1322) 
                                        (1323) .EndOfString:                               ;   Yes, end of string found...
                                        (1324)    push  X                                  ;        Save ptr
                                        (1325) .TerminateString:
                                        (1326)    mov   [X], 0x00                          ; Make sure string is zero
                                        (1327)    jmp   .End_GetNextParam
                                        (1328) 
                                        (1329) .ParamStartFound:
                                        (1330)    push  X                                  ; Beginning of parameter found, save pointer
                                        (1331) 
                                        (1332) .ParamLoop:                                 ; Now loop until end of parameter found.
                                        (1333)    inc   X                                  ; Advance pointers.
                                        (1334)    inc   [ptrParam]
                                        (1335)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
                                        (1336)    jz    .TerminateString
                                        (1337)    mov   A, [X]                             ; Get next character
                                        (1338)    jz    .End_GetNextParam
                                        (1339)    cmp   A, UART_DELIMITER                  ; Check if we have a delimiter
                                        (1340)    jnz   .ParamLoop                         ; Still no delimiter, loop again
                                        (1341)    mov   [X], 0x00                          ; Replace delimiter with null for end of substring
                                        (1342)    inc   [ptrParam]
                                        (1343)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
                                        (1344)    jnz   .End_GetNextParam                  ; If not end of string leave
                                        (1345)    mov   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Reset pointer to end of string.
                                        (1346) 
                                        (1347) .End_GetNextParam:
                                        (1348)    pop   X
                                        (1349)    push  X
                                        (1350)    cmp   [X], 0x00
                                        (1351)    jnz   .NotNullString
                                        (1352)    pop   X
                                        (1353)    mov   X, 0x00
                                        (1354)    mov   A, X
                                        (1355)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1356)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1357)    ret
                                        (1358) 
                                        (1359) .NotNullString:
                                        (1360)    pop  X
                                        (1361)    mov  A, >UART_aRxBuffer                  ; Return pointer
                                        (1362)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1363)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1364)    ret
                                        (1365) .ENDSECTION
                                        (1366) 
                                        (1367) 
                                        (1368) .SECTION
                                        (1369) ;-----------------------------------------------------------------------------
                                        (1370) ;  FUNCTION NAME: UART_szGetRestOfParams
                                        (1371) ;
                                        (1372) ;  DESCRIPTION:
                                        (1373) ;      Returns a pointer to the rest of the UART RX buffer
                                        (1374) ;-----------------------------------------------------------------------------
                                        (1375) ;
                                        (1376) ;  ARGUMENTS:  none
                                        (1377) ;
                                        (1378) ;  RETURNS:
                                        (1379) ;     A => MSB of parameter
                                        (1380) ;     X => LSB of parameter
                                        (1381) ;
                                        (1382) ;  SIDE EFFECTS:
                                        (1383) ;    The A and X registers may be modified by this or future implementations
                                        (1384) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1385) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1386) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1387) ;    functions.
                                        (1388) ;          
                                        (1389) ;    Currently only the page pointer registers listed below are modified: 
                                        (1390) ;          CUR_PP
                                        (1391) ;
                                        (1392)  UART_szGetRestOfParams:
                                        (1393) _UART_szGetRestOfParams:
                                        (1394)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1395)    RAM_SETPAGE_CUR >ptrParam
                                        (1396)    mov  A, <UART_aRxBuffer                  ; Get address to receive buffer
                                        (1397)    add  A, [ptrParam]                       ; Add string offset
                                        (1398)    mov  X,A
                                        (1399)    mov  A,>UART_aRxBuffer                   ; Return pointer
                                        (1400)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1401)    ret
                                        (1402) .ENDSECTION
                                        (1403) 
                                        (1404) ENDIF
                                        (1405) 
                                        (1406) 
                                        (1407) ; End of File UART.asm
FILE: G:\work\PSoC\VL_SER~2\VL_SER~1\main.c
(0001) //----------------------------------------------------------------------------
(0002) // C main line
(0003) //----------------------------------------------------------------------------
(0004) 
(0005) #include <m8c.h>        // part specific constants and macros
(0006) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0007) 
(0008) #include "stdio.h"
(0009) 
(0010) 
(0011) //Глобалните променливи са достъпни от всяка функция
(0012) unsigned char counter = 0;
(0013) enum Mode { MODE_HEX=0, MODE_DEC=1 } mode;
(0014) 
(0015) void main(void)
(0016) {
__UserModules_end|_main|__text_start|_main:
  str                  --> X+4
  i                    --> X+0
    0727: 10       PUSH  X
    0728: 4F       MOV   X,SP
    0729: 38 18    ADD   SP,0x18
(0017) 	char str[20];
(0018) 	long int i;
(0019) 	
(0020) 	M8C_EnableGInt ; // Uncomment this line to enable Global Interrupts
    072B: 71 01    OR    F,0x1
(0021) 	// Insert your main routine code here.
(0022) 	
(0023) 	/*
(0024) 	UART (Digital Comm - UART) блок e конфигуриран за 115200 bps като такта му е от VC3 = SysClock/26 =24MHz = 923076 Hz
(0025) 	115200 * 8 = 921600
(0026) 	 
(0027) 	PSoC изпраща периодично ASCII низ представящ стойността на брояч, който всеки път нараства с единица. 
(0028) 	При получен символ ‘h’ по серииния интерфейс, броячът започва да се показва в шестнайсеттичен вид. 
(0029) 	При ‘d’ стойността се праща отново в десетичен вид. При ‘с’ броячът се нулира.
(0030) 	
(0031) 	При приемане на символ по UART се генерира прекъсване, което се обработва в uartIsrRx
(0032) 	*/
(0033) 	
(0034) 	mode = MODE_DEC;
    072D: 62 D0 00 MOV   REG[0xD0],0x0
    0730: 55 2A 01 MOV   [mode],0x1
(0035) 	UART_Start(UART_PARITY_NONE);
    0733: 10       PUSH  X
    0734: 50 00    MOV   A,0x0
    0736: 7C 05 F7 LCALL _UART_Start
(0036) 	UART_IntCntl(UART_ENABLE_RX_INT);
    0739: 50 01    MOV   A,0x1
    073B: 7C 06 24 LCALL _UART_IntCntl
    073E: 20       POP   X
    073F: 80 99    JMP   0x07D9
(0037) 	
(0038) 	while(1)
(0039) 	{
(0040) 		counter++;
    0741: 62 D0 00 MOV   REG[0xD0],0x0
    0744: 76 2B    INC   [counter]
(0041) 		//Подготвя се низа за изпращане
(0042) 		if (mode==MODE_DEC) csprintf(str, "C=%d \r\n",      (int)counter);
    0746: 62 D0 00 MOV   REG[0xD0],0x0
    0749: 3C 2A 01 CMP   [mode],0x1
    074C: B0 29    JNZ   0x0776
    074E: 62 D0 00 MOV   REG[0xD0],0x0
    0751: 51 2B    MOV   A,[counter]
    0753: 62 D0 00 MOV   REG[0xD0],0x0
    0756: 53 26    MOV   [__r1],A
    0758: 50 00    MOV   A,0x0
    075A: 08       PUSH  A
    075B: 51 26    MOV   A,[__r1]
    075D: 08       PUSH  A
    075E: 50 01    MOV   A,0x1
    0760: 08       PUSH  A
    0761: 50 D7    MOV   A,0xD7
    0763: 08       PUSH  A
    0764: 5A 26    MOV   [__r1],X
    0766: 06 26 04 ADD   [__r1],0x4
    0769: 50 07    MOV   A,0x7
    076B: 08       PUSH  A
    076C: 51 26    MOV   A,[__r1]
    076E: 08       PUSH  A
    076F: 7C 0C BC LCALL _csprintf
    0772: 38 FA    ADD   SP,0xFA
    0774: 80 27    JMP   0x079C
(0043) 		else 				csprintf(str, "C=0x%x \r\n", (int )counter);
    0776: 62 D0 00 MOV   REG[0xD0],0x0
    0779: 51 2B    MOV   A,[counter]
    077B: 62 D0 00 MOV   REG[0xD0],0x0
    077E: 53 26    MOV   [__r1],A
    0780: 50 00    MOV   A,0x0
    0782: 08       PUSH  A
    0783: 51 26    MOV   A,[__r1]
    0785: 08       PUSH  A
    0786: 50 01    MOV   A,0x1
    0788: 08       PUSH  A
    0789: 50 CD    MOV   A,0xCD
    078B: 08       PUSH  A
    078C: 5A 26    MOV   [__r1],X
    078E: 06 26 04 ADD   [__r1],0x4
    0791: 50 07    MOV   A,0x7
    0793: 08       PUSH  A
    0794: 51 26    MOV   A,[__r1]
    0796: 08       PUSH  A
    0797: 7C 0C BC LCALL _csprintf
    079A: 38 FA    ADD   SP,0xFA
(0044) 		//Низа се праща по UART
(0045) 		UART_PutString(str);
    079C: 62 D0 00 MOV   REG[0xD0],0x0
    079F: 5A 26    MOV   [__r1],X
    07A1: 06 26 04 ADD   [__r1],0x4
    07A4: 10       PUSH  X
    07A5: 50 07    MOV   A,0x7
    07A7: 08       PUSH  A
    07A8: 51 26    MOV   A,[__r1]
    07AA: 5C       MOV   X,A
    07AB: 18       POP   A
    07AC: 7C 06 A6 LCALL _UART_PutString
    07AF: 20       POP   X
(0046) 		
(0047) 		//Някакво закъснение
(0048) 		for (i=0 ; i!=15000 ; i++);		
    07B0: 56 00 00 MOV   [X+0],0x0
    07B3: 56 01 00 MOV   [X+1],0x0
    07B6: 56 02 00 MOV   [X+2],0x0
    07B9: 56 03 00 MOV   [X+3],0x0
    07BC: 07 03 01 ADD   [X+3],0x1
    07BF: 0F 02 00 ADC   [X+2],0x0
    07C2: 0F 01 00 ADC   [X+1],0x0
    07C5: 0F 00 00 ADC   [X+0],0x0
    07C8: BF F3    JNZ   0x07BC
    07CA: 3D 01 00 CMP   [X+1],0x0
    07CD: BF EE    JNZ   0x07BC
    07CF: 3D 02 3A CMP   [X+2],0x3A
    07D2: BF E9    JNZ   0x07BC
    07D4: 3D 03 98 CMP   [X+3],0x98
    07D7: BF E4    JNZ   0x07BC
(0049) 	}
    07D9: 8F 67    JMP   0x0741
    07DB: 38 E8    ADD   SP,0xE8
    07DD: 20       POP   X
    07DE: 8F FF    JMP   0x07DE
(0050) }
(0051) 
(0052) 
(0053) //Функция за обработка на прекъсването при приемане на символ
(0054) void uartIsrRx(void)
(0055) {
_uartIsrRx:
  c                    --> X+0
    07E0: 10       PUSH  X
    07E1: 4F       MOV   X,SP
    07E2: 38 03    ADD   SP,0x3
(0056) 	unsigned char c;
(0057) 	
(0058) 	//Проверка за приет символ
(0059) 	c = UART_cReadChar(); //Ако няма приет символ функцията връща 0 веднага
    07E4: 10       PUSH  X
    07E5: 7C 06 79 LCALL _UART_cReadChar
    07E8: 20       POP   X
    07E9: 62 D0 00 MOV   REG[0xD0],0x0
    07EC: 54 00    MOV   [X+0],A
(0060) 	switch (c)
    07EE: 52 00    MOV   A,[X+0]
    07F0: 54 02    MOV   [X+2],A
    07F2: 56 01 00 MOV   [X+1],0x0
    07F5: 3D 01 00 CMP   [X+1],0x0
    07F8: B0 06    JNZ   0x07FF
    07FA: 3D 02 43 CMP   [X+2],0x43
    07FD: A0 69    JZ    0x0867
    07FF: 3D 01 00 CMP   [X+1],0x0
    0802: B0 06    JNZ   0x0809
    0804: 3D 02 44 CMP   [X+2],0x44
    0807: A0 37    JZ    0x083F
    0809: 3D 01 00 CMP   [X+1],0x0
    080C: B0 06    JNZ   0x0813
    080E: 3D 02 48 CMP   [X+2],0x48
    0811: A0 41    JZ    0x0853
    0813: 52 02    MOV   A,[X+2]
    0815: 11 43    SUB   A,0x43
    0817: 52 01    MOV   A,[X+1]
    0819: 31 80    XOR   A,0x80
    081B: 19 80    SBB   A,0x80
    081D: C0 5B    JC    0x0879
    081F: 3D 01 00 CMP   [X+1],0x0
    0822: B0 06    JNZ   0x0829
    0824: 3D 02 63 CMP   [X+2],0x63
    0827: A0 3F    JZ    0x0867
    0829: 3D 01 00 CMP   [X+1],0x0
    082C: B0 06    JNZ   0x0833
    082E: 3D 02 64 CMP   [X+2],0x64
    0831: A0 0D    JZ    0x083F
    0833: 3D 01 00 CMP   [X+1],0x0
    0836: B0 06    JNZ   0x083D
    0838: 3D 02 68 CMP   [X+2],0x68
    083B: A0 17    JZ    0x0853
    083D: 80 3B    JMP   0x0879
(0061) 	{
(0062) 		case 'd':
(0063) 		case 'D':
(0064) 			mode = MODE_DEC;
    083F: 62 D0 00 MOV   REG[0xD0],0x0
    0842: 55 2A 01 MOV   [mode],0x1
(0065) 			UART_CPutString("mode = DEC \r\n");
    0845: 10       PUSH  X
    0846: 50 01    MOV   A,0x1
    0848: 08       PUSH  A
    0849: 50 BF    MOV   A,0xBF
    084B: 5C       MOV   X,A
    084C: 18       POP   A
    084D: 7C 07 0C LCALL _UART_CPutString
    0850: 20       POP   X
(0066) 		break;
    0851: 80 27    JMP   0x0879
(0067) 		case 'h':
(0068) 		case 'H':				
(0069) 			mode = MODE_HEX;
    0853: 62 D0 00 MOV   REG[0xD0],0x0
    0856: 55 2A 00 MOV   [mode],0x0
(0070) 			UART_CPutString("mode = HEX \r\n");
    0859: 10       PUSH  X
    085A: 50 01    MOV   A,0x1
    085C: 08       PUSH  A
    085D: 50 B1    MOV   A,0xB1
    085F: 5C       MOV   X,A
    0860: 18       POP   A
    0861: 7C 07 0C LCALL _UART_CPutString
    0864: 20       POP   X
(0071) 			break;;
    0865: 80 13    JMP   0x0879
(0072) 		case 'c':
(0073) 		case 'C':
(0074) 			UART_CPutString("clear counter \r\n");
    0867: 10       PUSH  X
    0868: 50 01    MOV   A,0x1
    086A: 08       PUSH  A
    086B: 50 A0    MOV   A,0xA0
    086D: 5C       MOV   X,A
    086E: 18       POP   A
    086F: 7C 07 0C LCALL _UART_CPutString
    0872: 20       POP   X
(0075) 			counter=0;
    0873: 62 D0 00 MOV   REG[0xD0],0x0
    0876: 55 2B 00 MOV   [counter],0x0
(0076) 			break;
(0077) 		default :
(0078) 			break;;
    0879: 38 FD    ADD   SP,0xFD
(0079) 	}
(0080) }
    087B: 20       POP   X
    087C: 7F       RET   
__plcall:
    08C1: 53 1B    MOV   [__rX],A
    08C3: 28       ROMX  
    08C4: 08       PUSH  A
    08C5: 51 1B    MOV   A,[__rX]
    08C7: 75       INC   X
    08C8: 09 00    ADC   A,0x0
    08CA: 28       ROMX  
    08CB: 08       PUSH  A
    08CC: 7F       RET   
_itoa:
    08CD: 10       PUSH  X
    08CE: 4F       MOV   X,SP
    08CF: 38 09    ADD   SP,0x9
    08D1: 52 FA    MOV   A,[X-6]
    08D3: 54 03    MOV   [X+3],A
    08D5: 52 F9    MOV   A,[X-7]
    08D7: 54 02    MOV   [X+2],A
    08D9: 3D F9 00 CMP   [X-7],0x0
    08DC: B0 2F    JNZ   0x090C
    08DE: 3D FA 00 CMP   [X-6],0x0
    08E1: B0 2A    JNZ   0x090C
    08E3: 62 D0 00 MOV   REG[0xD0],0x0
    08E6: 52 FC    MOV   A,[X-4]
    08E8: 53 26    MOV   [__r1],A
    08EA: 52 FB    MOV   A,[X-5]
    08EC: 60 D5    MOV   REG[0xD5],A
    08EE: 50 30    MOV   A,0x30
    08F0: 3F 26    MVI   [__r1],A
    08F2: 52 FC    MOV   A,[X-4]
    08F4: 01 01    ADD   A,0x1
    08F6: 53 26    MOV   [__r1],A
    08F8: 52 FB    MOV   A,[X-5]
    08FA: 09 00    ADC   A,0x0
    08FC: 60 D5    MOV   REG[0xD5],A
    08FE: 50 00    MOV   A,0x0
    0900: 3F 26    MVI   [__r1],A
    0902: 52 FC    MOV   A,[X-4]
    0904: 53 26    MOV   [__r1],A
    0906: 52 FB    MOV   A,[X-5]
    0908: 53 27    MOV   [__r0],A
    090A: 81 97    JMP   0x0AA2
    090C: 52 FA    MOV   A,[X-6]
    090E: 11 00    SUB   A,0x0
    0910: 52 F9    MOV   A,[X-7]
    0912: 31 80    XOR   A,0x80
    0914: 19 80    SBB   A,0x80
    0916: D0 29    JNC   0x0940
    0918: 3D F7 00 CMP   [X-9],0x0
    091B: B0 24    JNZ   0x0940
    091D: 3D F8 0A CMP   [X-8],0xA
    0920: B0 1F    JNZ   0x0940
    0922: 56 06 01 MOV   [X+6],0x1
    0925: 62 D0 00 MOV   REG[0xD0],0x0
    0928: 52 03    MOV   A,[X+3]
    092A: 73       CPL   A
    092B: 53 26    MOV   [__r1],A
    092D: 52 02    MOV   A,[X+2]
    092F: 73       CPL   A
    0930: 53 27    MOV   [__r0],A
    0932: 51 26    MOV   A,[__r1]
    0934: 01 01    ADD   A,0x1
    0936: 54 03    MOV   [X+3],A
    0938: 51 27    MOV   A,[__r0]
    093A: 09 00    ADC   A,0x0
    093C: 54 02    MOV   [X+2],A
    093E: 80 04    JMP   0x0943
    0940: 56 06 00 MOV   [X+6],0x0
    0943: 52 FC    MOV   A,[X-4]
    0945: 54 01    MOV   [X+1],A
    0947: 52 FB    MOV   A,[X-5]
    0949: 54 00    MOV   [X+0],A
    094B: 62 D0 00 MOV   REG[0xD0],0x0
    094E: 52 F7    MOV   A,[X-9]
    0950: 08       PUSH  A
    0951: 52 F8    MOV   A,[X-8]
    0953: 08       PUSH  A
    0954: 52 02    MOV   A,[X+2]
    0956: 08       PUSH  A
    0957: 52 03    MOV   A,[X+3]
    0959: 08       PUSH  A
    095A: 7C 08 7D LCALL 0x087D
    095D: 38 FE    ADD   SP,0xFE
    095F: 18       POP   A
    0960: 53 26    MOV   [__r1],A
    0962: 18       POP   A
    0963: 53 27    MOV   [__r0],A
    0965: 51 26    MOV   A,[__r1]
    0967: 54 08    MOV   [X+8],A
    0969: 51 27    MOV   A,[__r0]
    096B: 54 07    MOV   [X+7],A
    096D: 50 09    MOV   A,0x9
    096F: 13 08    SUB   A,[X+8]
    0971: 52 07    MOV   A,[X+7]
    0973: 31 80    XOR   A,0x80
    0975: 53 1B    MOV   [__rX],A
    0977: 50 80    MOV   A,0x80
    0979: 1A 1B    SBB   A,[__rX]
    097B: C0 28    JC    0x09A4
    097D: 62 D0 00 MOV   REG[0xD0],0x0
    0980: 52 01    MOV   A,[X+1]
    0982: 53 26    MOV   [__r1],A
    0984: 52 00    MOV   A,[X+0]
    0986: 53 27    MOV   [__r0],A
    0988: 51 26    MOV   A,[__r1]
    098A: 01 01    ADD   A,0x1
    098C: 54 01    MOV   [X+1],A
    098E: 51 27    MOV   A,[__r0]
    0990: 09 00    ADC   A,0x0
    0992: 54 00    MOV   [X+0],A
    0994: 52 08    MOV   A,[X+8]
    0996: 01 30    ADD   A,0x30
    0998: 53 25    MOV   [__r2],A
    099A: 51 27    MOV   A,[__r0]
    099C: 60 D5    MOV   REG[0xD5],A
    099E: 51 25    MOV   A,[__r2]
    09A0: 3F 26    MVI   [__r1],A
    09A2: 80 26    JMP   0x09C9
    09A4: 62 D0 00 MOV   REG[0xD0],0x0
    09A7: 52 01    MOV   A,[X+1]
    09A9: 53 26    MOV   [__r1],A
    09AB: 52 00    MOV   A,[X+0]
    09AD: 53 27    MOV   [__r0],A
    09AF: 51 26    MOV   A,[__r1]
    09B1: 01 01    ADD   A,0x1
    09B3: 54 01    MOV   [X+1],A
    09B5: 51 27    MOV   A,[__r0]
    09B7: 09 00    ADC   A,0x0
    09B9: 54 00    MOV   [X+0],A
    09BB: 52 08    MOV   A,[X+8]
    09BD: 01 57    ADD   A,0x57
    09BF: 53 25    MOV   [__r2],A
    09C1: 51 27    MOV   A,[__r0]
    09C3: 60 D5    MOV   REG[0xD5],A
    09C5: 51 25    MOV   A,[__r2]
    09C7: 3F 26    MVI   [__r1],A
    09C9: 52 F7    MOV   A,[X-9]
    09CB: 08       PUSH  A
    09CC: 52 F8    MOV   A,[X-8]
    09CE: 08       PUSH  A
    09CF: 52 02    MOV   A,[X+2]
    09D1: 08       PUSH  A
    09D2: 52 03    MOV   A,[X+3]
    09D4: 08       PUSH  A
    09D5: 62 D0 00 MOV   REG[0xD0],0x0
    09D8: 7C 08 7D LCALL 0x087D
    09DB: 18       POP   A
    09DC: 54 03    MOV   [X+3],A
    09DE: 18       POP   A
    09DF: 54 02    MOV   [X+2],A
    09E1: 38 FE    ADD   SP,0xFE
    09E3: 3D 02 00 CMP   [X+2],0x0
    09E6: BF 64    JNZ   0x094B
    09E8: 3D 03 00 CMP   [X+3],0x0
    09EB: BF 5F    JNZ   0x094B
    09ED: 3D 06 00 CMP   [X+6],0x0
    09F0: A0 20    JZ    0x0A11
    09F2: 62 D0 00 MOV   REG[0xD0],0x0
    09F5: 52 01    MOV   A,[X+1]
    09F7: 53 26    MOV   [__r1],A
    09F9: 52 00    MOV   A,[X+0]
    09FB: 53 27    MOV   [__r0],A
    09FD: 51 26    MOV   A,[__r1]
    09FF: 01 01    ADD   A,0x1
    0A01: 54 01    MOV   [X+1],A
    0A03: 51 27    MOV   A,[__r0]
    0A05: 09 00    ADC   A,0x0
    0A07: 54 00    MOV   [X+0],A
    0A09: 51 27    MOV   A,[__r0]
    0A0B: 60 D5    MOV   REG[0xD5],A
    0A0D: 50 2D    MOV   A,0x2D
    0A0F: 3F 26    MVI   [__r1],A
    0A11: 62 D0 00 MOV   REG[0xD0],0x0
    0A14: 52 01    MOV   A,[X+1]
    0A16: 53 26    MOV   [__r1],A
    0A18: 52 00    MOV   A,[X+0]
    0A1A: 53 27    MOV   [__r0],A
    0A1C: 51 26    MOV   A,[__r1]
    0A1E: 01 FF    ADD   A,0xFF
    0A20: 54 01    MOV   [X+1],A
    0A22: 51 27    MOV   A,[__r0]
    0A24: 09 FF    ADC   A,0xFF
    0A26: 54 00    MOV   [X+0],A
    0A28: 51 27    MOV   A,[__r0]
    0A2A: 60 D5    MOV   REG[0xD5],A
    0A2C: 50 00    MOV   A,0x0
    0A2E: 3F 26    MVI   [__r1],A
    0A30: 52 FC    MOV   A,[X-4]
    0A32: 54 05    MOV   [X+5],A
    0A34: 52 FB    MOV   A,[X-5]
    0A36: 54 04    MOV   [X+4],A
    0A38: 80 54    JMP   0x0A8D
    0A3A: 62 D0 00 MOV   REG[0xD0],0x0
    0A3D: 52 05    MOV   A,[X+5]
    0A3F: 53 26    MOV   [__r1],A
    0A41: 52 04    MOV   A,[X+4]
    0A43: 60 D4    MOV   REG[0xD4],A
    0A45: 3E 26    MVI   A,[__r1]
    0A47: 54 06    MOV   [X+6],A
    0A49: 52 05    MOV   A,[X+5]
    0A4B: 53 26    MOV   [__r1],A
    0A4D: 52 04    MOV   A,[X+4]
    0A4F: 53 27    MOV   [__r0],A
    0A51: 51 26    MOV   A,[__r1]
    0A53: 01 01    ADD   A,0x1
    0A55: 54 05    MOV   [X+5],A
    0A57: 51 27    MOV   A,[__r0]
    0A59: 09 00    ADC   A,0x0
    0A5B: 54 04    MOV   [X+4],A
    0A5D: 52 01    MOV   A,[X+1]
    0A5F: 53 24    MOV   [__r3],A
    0A61: 52 00    MOV   A,[X+0]
    0A63: 60 D4    MOV   REG[0xD4],A
    0A65: 3E 24    MVI   A,[__r3]
    0A67: 53 25    MOV   [__r2],A
    0A69: 51 27    MOV   A,[__r0]
    0A6B: 60 D5    MOV   REG[0xD5],A
    0A6D: 51 25    MOV   A,[__r2]
    0A6F: 3F 26    MVI   [__r1],A
    0A71: 52 01    MOV   A,[X+1]
    0A73: 53 26    MOV   [__r1],A
    0A75: 52 00    MOV   A,[X+0]
    0A77: 53 27    MOV   [__r0],A
    0A79: 51 26    MOV   A,[__r1]
    0A7B: 01 FF    ADD   A,0xFF
    0A7D: 54 01    MOV   [X+1],A
    0A7F: 51 27    MOV   A,[__r0]
    0A81: 09 FF    ADC   A,0xFF
    0A83: 54 00    MOV   [X+0],A
    0A85: 51 27    MOV   A,[__r0]
    0A87: 60 D5    MOV   REG[0xD5],A
    0A89: 52 06    MOV   A,[X+6]
    0A8B: 3F 26    MVI   [__r1],A
    0A8D: 52 05    MOV   A,[X+5]
    0A8F: 13 01    SUB   A,[X+1]
    0A91: 52 04    MOV   A,[X+4]
    0A93: 1B 00    SBB   A,[X+0]
    0A95: CF A4    JC    0x0A3A
    0A97: 62 D0 00 MOV   REG[0xD0],0x0
    0A9A: 52 FC    MOV   A,[X-4]
    0A9C: 53 26    MOV   [__r1],A
    0A9E: 52 FB    MOV   A,[X-5]
    0AA0: 53 27    MOV   [__r0],A
    0AA2: 38 F7    ADD   SP,0xF7
    0AA4: 20       POP   X
    0AA5: 7F       RET   
_utoa:
    0AA6: 10       PUSH  X
    0AA7: 4F       MOV   X,SP
    0AA8: 38 07    ADD   SP,0x7
    0AAA: 52 FC    MOV   A,[X-4]
    0AAC: 54 01    MOV   [X+1],A
    0AAE: 52 FB    MOV   A,[X-5]
    0AB0: 54 00    MOV   [X+0],A
    0AB2: 62 D0 00 MOV   REG[0xD0],0x0
    0AB5: 52 F7    MOV   A,[X-9]
    0AB7: 08       PUSH  A
    0AB8: 52 F8    MOV   A,[X-8]
    0ABA: 08       PUSH  A
    0ABB: 52 F9    MOV   A,[X-7]
    0ABD: 08       PUSH  A
    0ABE: 52 FA    MOV   A,[X-6]
    0AC0: 08       PUSH  A
    0AC1: 7C 08 7D LCALL 0x087D
    0AC4: 38 FE    ADD   SP,0xFE
    0AC6: 18       POP   A
    0AC7: 53 26    MOV   [__r1],A
    0AC9: 18       POP   A
    0ACA: 53 27    MOV   [__r0],A
    0ACC: 51 26    MOV   A,[__r1]
    0ACE: 54 06    MOV   [X+6],A
    0AD0: 51 27    MOV   A,[__r0]
    0AD2: 54 05    MOV   [X+5],A
    0AD4: 50 09    MOV   A,0x9
    0AD6: 13 06    SUB   A,[X+6]
    0AD8: 52 05    MOV   A,[X+5]
    0ADA: 31 80    XOR   A,0x80
    0ADC: 53 1B    MOV   [__rX],A
    0ADE: 50 80    MOV   A,0x80
    0AE0: 1A 1B    SBB   A,[__rX]
    0AE2: C0 28    JC    0x0B0B
    0AE4: 62 D0 00 MOV   REG[0xD0],0x0
    0AE7: 52 01    MOV   A,[X+1]
    0AE9: 53 26    MOV   [__r1],A
    0AEB: 52 00    MOV   A,[X+0]
    0AED: 53 27    MOV   [__r0],A
    0AEF: 51 26    MOV   A,[__r1]
    0AF1: 01 01    ADD   A,0x1
    0AF3: 54 01    MOV   [X+1],A
    0AF5: 51 27    MOV   A,[__r0]
    0AF7: 09 00    ADC   A,0x0
    0AF9: 54 00    MOV   [X+0],A
    0AFB: 52 06    MOV   A,[X+6]
    0AFD: 01 30    ADD   A,0x30
    0AFF: 53 25    MOV   [__r2],A
    0B01: 51 27    MOV   A,[__r0]
    0B03: 60 D5    MOV   REG[0xD5],A
    0B05: 51 25    MOV   A,[__r2]
    0B07: 3F 26    MVI   [__r1],A
    0B09: 80 26    JMP   0x0B30
    0B0B: 62 D0 00 MOV   REG[0xD0],0x0
    0B0E: 52 01    MOV   A,[X+1]
    0B10: 53 26    MOV   [__r1],A
    0B12: 52 00    MOV   A,[X+0]
    0B14: 53 27    MOV   [__r0],A
    0B16: 51 26    MOV   A,[__r1]
    0B18: 01 01    ADD   A,0x1
    0B1A: 54 01    MOV   [X+1],A
    0B1C: 51 27    MOV   A,[__r0]
    0B1E: 09 00    ADC   A,0x0
    0B20: 54 00    MOV   [X+0],A
    0B22: 52 06    MOV   A,[X+6]
    0B24: 01 57    ADD   A,0x57
    0B26: 53 25    MOV   [__r2],A
    0B28: 51 27    MOV   A,[__r0]
    0B2A: 60 D5    MOV   REG[0xD5],A
    0B2C: 51 25    MOV   A,[__r2]
    0B2E: 3F 26    MVI   [__r1],A
    0B30: 52 F7    MOV   A,[X-9]
    0B32: 08       PUSH  A
    0B33: 52 F8    MOV   A,[X-8]
    0B35: 08       PUSH  A
    0B36: 52 F9    MOV   A,[X-7]
    0B38: 08       PUSH  A
    0B39: 52 FA    MOV   A,[X-6]
    0B3B: 08       PUSH  A
    0B3C: 62 D0 00 MOV   REG[0xD0],0x0
    0B3F: 7C 08 7D LCALL 0x087D
    0B42: 18       POP   A
    0B43: 54 FA    MOV   [X-6],A
    0B45: 18       POP   A
    0B46: 54 F9    MOV   [X-7],A
    0B48: 38 FE    ADD   SP,0xFE
    0B4A: 3D F9 00 CMP   [X-7],0x0
    0B4D: BF 64    JNZ   0x0AB2
    0B4F: 3D FA 00 CMP   [X-6],0x0
    0B52: BF 5F    JNZ   0x0AB2
    0B54: 62 D0 00 MOV   REG[0xD0],0x0
    0B57: 52 01    MOV   A,[X+1]
    0B59: 53 26    MOV   [__r1],A
    0B5B: 52 00    MOV   A,[X+0]
    0B5D: 53 27    MOV   [__r0],A
    0B5F: 51 26    MOV   A,[__r1]
    0B61: 01 FF    ADD   A,0xFF
    0B63: 54 01    MOV   [X+1],A
    0B65: 51 27    MOV   A,[__r0]
    0B67: 09 FF    ADC   A,0xFF
    0B69: 54 00    MOV   [X+0],A
    0B6B: 51 27    MOV   A,[__r0]
    0B6D: 60 D5    MOV   REG[0xD5],A
    0B6F: 50 00    MOV   A,0x0
    0B71: 3F 26    MVI   [__r1],A
    0B73: 52 FC    MOV   A,[X-4]
    0B75: 54 03    MOV   [X+3],A
    0B77: 52 FB    MOV   A,[X-5]
    0B79: 54 02    MOV   [X+2],A
    0B7B: 80 54    JMP   0x0BD0
    0B7D: 62 D0 00 MOV   REG[0xD0],0x0
    0B80: 52 03    MOV   A,[X+3]
    0B82: 53 26    MOV   [__r1],A
    0B84: 52 02    MOV   A,[X+2]
    0B86: 60 D4    MOV   REG[0xD4],A
    0B88: 3E 26    MVI   A,[__r1]
    0B8A: 54 04    MOV   [X+4],A
    0B8C: 52 03    MOV   A,[X+3]
    0B8E: 53 26    MOV   [__r1],A
    0B90: 52 02    MOV   A,[X+2]
    0B92: 53 27    MOV   [__r0],A
    0B94: 51 26    MOV   A,[__r1]
    0B96: 01 01    ADD   A,0x1
    0B98: 54 03    MOV   [X+3],A
    0B9A: 51 27    MOV   A,[__r0]
    0B9C: 09 00    ADC   A,0x0
    0B9E: 54 02    MOV   [X+2],A
    0BA0: 52 01    MOV   A,[X+1]
    0BA2: 53 24    MOV   [__r3],A
    0BA4: 52 00    MOV   A,[X+0]
    0BA6: 60 D4    MOV   REG[0xD4],A
    0BA8: 3E 24    MVI   A,[__r3]
    0BAA: 53 25    MOV   [__r2],A
    0BAC: 51 27    MOV   A,[__r0]
    0BAE: 60 D5    MOV   REG[0xD5],A
    0BB0: 51 25    MOV   A,[__r2]
    0BB2: 3F 26    MVI   [__r1],A
    0BB4: 52 01    MOV   A,[X+1]
    0BB6: 53 26    MOV   [__r1],A
    0BB8: 52 00    MOV   A,[X+0]
    0BBA: 53 27    MOV   [__r0],A
    0BBC: 51 26    MOV   A,[__r1]
    0BBE: 01 FF    ADD   A,0xFF
    0BC0: 54 01    MOV   [X+1],A
    0BC2: 51 27    MOV   A,[__r0]
    0BC4: 09 FF    ADC   A,0xFF
    0BC6: 54 00    MOV   [X+0],A
    0BC8: 51 27    MOV   A,[__r0]
    0BCA: 60 D5    MOV   REG[0xD5],A
    0BCC: 52 04    MOV   A,[X+4]
    0BCE: 3F 26    MVI   [__r1],A
    0BD0: 52 03    MOV   A,[X+3]
    0BD2: 13 01    SUB   A,[X+1]
    0BD4: 52 02    MOV   A,[X+2]
    0BD6: 1B 00    SBB   A,[X+0]
    0BD8: CF A4    JC    0x0B7D
    0BDA: 62 D0 00 MOV   REG[0xD0],0x0
    0BDD: 52 FC    MOV   A,[X-4]
    0BDF: 53 26    MOV   [__r1],A
    0BE1: 52 FB    MOV   A,[X-5]
    0BE3: 53 27    MOV   [__r0],A
    0BE5: 38 F9    ADD   SP,0xF9
    0BE7: 20       POP   X
    0BE8: 7F       RET   
_isdigit:
    0BE9: 10       PUSH  X
    0BEA: 4F       MOV   X,SP
    0BEB: 62 D0 00 MOV   REG[0xD0],0x0
    0BEE: 52 FC    MOV   A,[X-4]
    0BF0: 01 6C    ADD   A,0x6C
    0BF2: 53 26    MOV   [__r1],A
    0BF4: 52 FB    MOV   A,[X-5]
    0BF6: 09 02    ADC   A,0x2
    0BF8: 10       PUSH  X
    0BF9: 58 26    MOV   X,[__r1]
    0BFB: 28       ROMX  
    0BFC: 20       POP   X
    0BFD: 53 26    MOV   [__r1],A
    0BFF: 55 27 00 MOV   [__r0],0x0
    0C02: 26 26 04 AND   [__r1],0x4
    0C05: 26 27 00 AND   [__r0],0x0
    0C08: 20       POP   X
    0C09: 7F       RET   
_islower:
    0C0A: 10       PUSH  X
    0C0B: 4F       MOV   X,SP
    0C0C: 62 D0 00 MOV   REG[0xD0],0x0
    0C0F: 52 FC    MOV   A,[X-4]
    0C11: 01 6C    ADD   A,0x6C
    0C13: 53 26    MOV   [__r1],A
    0C15: 52 FB    MOV   A,[X-5]
    0C17: 09 02    ADC   A,0x2
    0C19: 10       PUSH  X
    0C1A: 58 26    MOV   X,[__r1]
    0C1C: 28       ROMX  
    0C1D: 20       POP   X
    0C1E: 53 26    MOV   [__r1],A
    0C20: 55 27 00 MOV   [__r0],0x0
    0C23: 26 26 02 AND   [__r1],0x2
    0C26: 26 27 00 AND   [__r0],0x0
    0C29: 20       POP   X
    0C2A: 7F       RET   
_isspace:
    0C2B: 10       PUSH  X
    0C2C: 4F       MOV   X,SP
    0C2D: 62 D0 00 MOV   REG[0xD0],0x0
    0C30: 52 FC    MOV   A,[X-4]
    0C32: 01 6C    ADD   A,0x6C
    0C34: 53 26    MOV   [__r1],A
    0C36: 52 FB    MOV   A,[X-5]
    0C38: 09 02    ADC   A,0x2
    0C3A: 10       PUSH  X
    0C3B: 58 26    MOV   X,[__r1]
    0C3D: 28       ROMX  
    0C3E: 20       POP   X
    0C3F: 53 26    MOV   [__r1],A
    0C41: 55 27 00 MOV   [__r0],0x0
    0C44: 26 26 10 AND   [__r1],0x10
    0C47: 26 27 00 AND   [__r0],0x0
    0C4A: 20       POP   X
    0C4B: 7F       RET   
_toupper:
    0C4C: 10       PUSH  X
    0C4D: 4F       MOV   X,SP
    0C4E: 52 FB    MOV   A,[X-5]
    0C50: 08       PUSH  A
    0C51: 52 FC    MOV   A,[X-4]
    0C53: 08       PUSH  A
    0C54: 7C 0C 0A LCALL _islower
    0C57: 38 FE    ADD   SP,0xFE
    0C59: 62 D0 00 MOV   REG[0xD0],0x0
    0C5C: 3C 27 00 CMP   [__r0],0x0
    0C5F: B0 06    JNZ   0x0C66
    0C61: 3C 26 00 CMP   [__r1],0x0
    0C64: A0 18    JZ    0x0C7D
    0C66: 62 D0 00 MOV   REG[0xD0],0x0
    0C69: 52 FC    MOV   A,[X-4]
    0C6B: 11 61    SUB   A,0x61
    0C6D: 53 26    MOV   [__r1],A
    0C6F: 52 FB    MOV   A,[X-5]
    0C71: 19 00    SBB   A,0x0
    0C73: 53 27    MOV   [__r0],A
    0C75: 06 26 41 ADD   [__r1],0x41
    0C78: 0E 27 00 ADC   [__r0],0x0
    0C7B: 80 0C    JMP   0x0C88
    0C7D: 62 D0 00 MOV   REG[0xD0],0x0
    0C80: 52 FC    MOV   A,[X-4]
    0C82: 53 26    MOV   [__r1],A
    0C84: 52 FB    MOV   A,[X-5]
    0C86: 53 27    MOV   [__r0],A
    0C88: 20       POP   X
    0C89: 7F       RET   
__csdepi:
    0C8A: 10       PUSH  X
    0C8B: 4F       MOV   X,SP
    0C8C: 62 D0 00 MOV   REG[0xD0],0x0
    0C8F: 51 29    MOV   A,[0x29]
    0C91: 08       PUSH  A
    0C92: 51 28    MOV   A,[0x28]
    0C94: 62 D0 00 MOV   REG[0xD0],0x0
    0C97: 53 27    MOV   [__r0],A
    0C99: 18       POP   A
    0C9A: 53 26    MOV   [__r1],A
    0C9C: 01 01    ADD   A,0x1
    0C9E: 62 D0 00 MOV   REG[0xD0],0x0
    0CA1: 53 29    MOV   [0x29],A
    0CA3: 62 D0 00 MOV   REG[0xD0],0x0
    0CA6: 51 27    MOV   A,[__r0]
    0CA8: 09 00    ADC   A,0x0
    0CAA: 62 D0 00 MOV   REG[0xD0],0x0
    0CAD: 53 28    MOV   [0x28],A
    0CAF: 62 D0 00 MOV   REG[0xD0],0x0
    0CB2: 51 27    MOV   A,[__r0]
    0CB4: 60 D5    MOV   REG[0xD5],A
    0CB6: 52 FC    MOV   A,[X-4]
    0CB8: 3F 26    MVI   [__r1],A
    0CBA: 20       POP   X
    0CBB: 7F       RET   
_csprintf:
    0CBC: 10       PUSH  X
    0CBD: 4F       MOV   X,SP
    0CBE: 38 02    ADD   SP,0x2
    0CC0: 62 D0 00 MOV   REG[0xD0],0x0
    0CC3: 52 FC    MOV   A,[X-4]
    0CC5: 53 29    MOV   [0x29],A
    0CC7: 52 FB    MOV   A,[X-5]
    0CC9: 53 28    MOV   [0x28],A
    0CCB: 62 D0 00 MOV   REG[0xD0],0x0
    0CCE: 5A 26    MOV   [__r1],X
    0CD0: 16 26 07 SUB   [__r1],0x7
    0CD3: 51 26    MOV   A,[__r1]
    0CD5: 54 01    MOV   [X+1],A
    0CD7: 56 00 07 MOV   [X+0],0x7
    0CDA: 52 00    MOV   A,[X+0]
    0CDC: 08       PUSH  A
    0CDD: 52 01    MOV   A,[X+1]
    0CDF: 08       PUSH  A
    0CE0: 52 F9    MOV   A,[X-7]
    0CE2: 08       PUSH  A
    0CE3: 52 FA    MOV   A,[X-6]
    0CE5: 08       PUSH  A
    0CE6: 50 03    MOV   A,0x3
    0CE8: 08       PUSH  A
    0CE9: 50 E2    MOV   A,0xE2
    0CEB: 08       PUSH  A
    0CEC: 7C 0D 25 LCALL __cprint
    0CEF: 38 FA    ADD   SP,0xFA
    0CF1: 62 D0 00 MOV   REG[0xD0],0x0
    0CF4: 51 29    MOV   A,[0x29]
    0CF6: 08       PUSH  A
    0CF7: 51 28    MOV   A,[0x28]
    0CF9: 62 D0 00 MOV   REG[0xD0],0x0
    0CFC: 53 27    MOV   [__r0],A
    0CFE: 18       POP   A
    0CFF: 53 26    MOV   [__r1],A
    0D01: 51 27    MOV   A,[__r0]
    0D03: 60 D5    MOV   REG[0xD5],A
    0D05: 50 00    MOV   A,0x0
    0D07: 3F 26    MVI   [__r1],A
    0D09: 62 D0 00 MOV   REG[0xD0],0x0
    0D0C: 51 29    MOV   A,[0x29]
    0D0E: 13 FC    SUB   A,[X-4]
    0D10: 62 D0 00 MOV   REG[0xD0],0x0
    0D13: 53 26    MOV   [__r1],A
    0D15: 62 D0 00 MOV   REG[0xD0],0x0
    0D18: 51 28    MOV   A,[0x28]
    0D1A: 1B FB    SBB   A,[X-5]
    0D1C: 62 D0 00 MOV   REG[0xD0],0x0
    0D1F: 53 27    MOV   [__r0],A
    0D21: 38 FE    ADD   SP,0xFE
    0D23: 20       POP   X
    0D24: 7F       RET   
__cprint:
    0D25: 10       PUSH  X
    0D26: 4F       MOV   X,SP
    0D27: 38 11    ADD   SP,0x11
    0D29: 56 05 00 MOV   [X+5],0x0
    0D2C: 56 04 00 MOV   [X+4],0x0
    0D2F: 83 C7    JMP   0x10F7
    0D31: 62 D0 00 MOV   REG[0xD0],0x0
    0D34: 52 FA    MOV   A,[X-6]
    0D36: 53 26    MOV   [__r1],A
    0D38: 52 F9    MOV   A,[X-7]
    0D3A: 10       PUSH  X
    0D3B: 58 26    MOV   X,[__r1]
    0D3D: 28       ROMX  
    0D3E: 20       POP   X
    0D3F: 39 25    CMP   A,0x25
    0D41: A0 23    JZ    0x0D65
    0D43: 52 FA    MOV   A,[X-6]
    0D45: 53 26    MOV   [__r1],A
    0D47: 52 F9    MOV   A,[X-7]
    0D49: 10       PUSH  X
    0D4A: 58 26    MOV   X,[__r1]
    0D4C: 28       ROMX  
    0D4D: 20       POP   X
    0D4E: 10       PUSH  X
    0D4F: 08       PUSH  A
    0D50: 52 FC    MOV   A,[X-4]
    0D52: 53 26    MOV   [__r1],A
    0D54: 52 FB    MOV   A,[X-5]
    0D56: 58 26    MOV   X,[__r1]
    0D58: 7C 08 C1 LCALL __plcall
    0D5B: 38 FF    ADD   SP,0xFF
    0D5D: 20       POP   X
    0D5E: 77 05    INC   [X+5]
    0D60: 0F 04 00 ADC   [X+4],0x0
    0D63: 83 8E    JMP   0x10F2
    0D65: 56 0A 00 MOV   [X+10],0x0
    0D68: 56 09 00 MOV   [X+9],0x0
    0D6B: 56 07 00 MOV   [X+7],0x0
    0D6E: 56 06 00 MOV   [X+6],0x0
    0D71: 56 08 20 MOV   [X+8],0x20
    0D74: 77 FA    INC   [X-6]
    0D76: 0F F9 00 ADC   [X-7],0x0
    0D79: 62 D0 00 MOV   REG[0xD0],0x0
    0D7C: 52 FA    MOV   A,[X-6]
    0D7E: 53 26    MOV   [__r1],A
    0D80: 52 F9    MOV   A,[X-7]
    0D82: 10       PUSH  X
    0D83: 58 26    MOV   X,[__r1]
    0D85: 28       ROMX  
    0D86: 20       POP   X
    0D87: 54 10    MOV   [X+16],A
    0D89: 56 0F 00 MOV   [X+15],0x0
    0D8C: 52 10    MOV   A,[X+16]
    0D8E: 11 58    SUB   A,0x58
    0D90: 53 1A    MOV   [__rY],A
    0D92: 52 0F    MOV   A,[X+15]
    0D94: 31 80    XOR   A,0x80
    0D96: 19 80    SBB   A,0x80
    0D98: 2A 1A    OR    A,[__rY]
    0D9A: A0 ED    JZ    0x0E88
    0D9C: D0 22    JNC   0x0DBF
    0D9E: 52 10    MOV   A,[X+16]
    0DA0: 11 45    SUB   A,0x45
    0DA2: 62 D0 00 MOV   REG[0xD0],0x0
    0DA5: 53 1A    MOV   [__rY],A
    0DA7: 52 0F    MOV   A,[X+15]
    0DA9: 31 80    XOR   A,0x80
    0DAB: 19 80    SBB   A,0x80
    0DAD: C0 83    JC    0x0E31
    0DAF: 2A 1A    OR    A,[__rY]
    0DB1: A3 38    JZ    0x10EA
    0DB3: 3D 0F 00 CMP   [X+15],0x0
    0DB6: B0 06    JNZ   0x0DBD
    0DB8: 3D 10 53 CMP   [X+16],0x53
    0DBB: A2 32    JZ    0x0FEE
    0DBD: 80 73    JMP   0x0E31
    0DBF: 3D 0F 00 CMP   [X+15],0x0
    0DC2: B0 06    JNZ   0x0DC9
    0DC4: 3D 10 63 CMP   [X+16],0x63
    0DC7: A1 F6    JZ    0x0FBE
    0DC9: 3D 0F 00 CMP   [X+15],0x0
    0DCC: B0 06    JNZ   0x0DD3
    0DCE: 3D 10 64 CMP   [X+16],0x64
    0DD1: A0 84    JZ    0x0E56
    0DD3: 3D 0F 00 CMP   [X+15],0x0
    0DD6: B0 06    JNZ   0x0DDD
    0DD8: 3D 10 65 CMP   [X+16],0x65
    0DDB: A3 0E    JZ    0x10EA
    0DDD: 3D 0F 00 CMP   [X+15],0x0
    0DE0: B0 06    JNZ   0x0DE7
    0DE2: 3D 10 66 CMP   [X+16],0x66
    0DE5: A3 04    JZ    0x10EA
    0DE7: 3D 0F 00 CMP   [X+15],0x0
    0DEA: B0 06    JNZ   0x0DF1
    0DEC: 3D 10 69 CMP   [X+16],0x69
    0DEF: A0 66    JZ    0x0E56
    0DF1: 3D 0F 00 CMP   [X+15],0x0
    0DF4: B0 06    JNZ   0x0DFB
    0DF6: 3D 10 6F CMP   [X+16],0x6F
    0DF9: A0 8E    JZ    0x0E88
    0DFB: 3D 0F 00 CMP   [X+15],0x0
    0DFE: B0 06    JNZ   0x0E05
    0E00: 3D 10 70 CMP   [X+16],0x70
    0E03: A0 84    JZ    0x0E88
    0E05: 52 10    MOV   A,[X+16]
    0E07: 11 63    SUB   A,0x63
    0E09: 52 0F    MOV   A,[X+15]
    0E0B: 31 80    XOR   A,0x80
    0E0D: 19 80    SBB   A,0x80
    0E0F: C0 21    JC    0x0E31
    0E11: 3D 0F 00 CMP   [X+15],0x0
    0E14: B0 06    JNZ   0x0E1B
    0E16: 3D 10 73 CMP   [X+16],0x73
    0E19: A2 4A    JZ    0x1064
    0E1B: 3D 0F 00 CMP   [X+15],0x0
    0E1E: B0 06    JNZ   0x0E25
    0E20: 3D 10 75 CMP   [X+16],0x75
    0E23: A0 64    JZ    0x0E88
    0E25: 3D 0F 00 CMP   [X+15],0x0
    0E28: B0 06    JNZ   0x0E2F
    0E2A: 3D 10 78 CMP   [X+16],0x78
    0E2D: A0 5A    JZ    0x0E88
    0E2F: 80 01    JMP   0x0E31
    0E31: 62 D0 00 MOV   REG[0xD0],0x0
    0E34: 52 FA    MOV   A,[X-6]
    0E36: 53 26    MOV   [__r1],A
    0E38: 52 F9    MOV   A,[X-7]
    0E3A: 10       PUSH  X
    0E3B: 58 26    MOV   X,[__r1]
    0E3D: 28       ROMX  
    0E3E: 20       POP   X
    0E3F: 10       PUSH  X
    0E40: 08       PUSH  A
    0E41: 52 FC    MOV   A,[X-4]
    0E43: 53 26    MOV   [__r1],A
    0E45: 52 FB    MOV   A,[X-5]
    0E47: 58 26    MOV   X,[__r1]
    0E49: 7C 08 C1 LCALL __plcall
    0E4C: 38 FF    ADD   SP,0xFF
    0E4E: 20       POP   X
    0E4F: 77 05    INC   [X+5]
    0E51: 0F 04 00 ADC   [X+4],0x0
    0E54: 82 9D    JMP   0x10F2
    0E56: 07 F8 FE ADD   [X-8],0xFE
    0E59: 0F F7 FF ADC   [X-9],0xFF
    0E5C: 62 D0 00 MOV   REG[0xD0],0x0
    0E5F: 52 F8    MOV   A,[X-8]
    0E61: 53 26    MOV   [__r1],A
    0E63: 52 F7    MOV   A,[X-9]
    0E65: 60 D4    MOV   REG[0xD4],A
    0E67: 3E 26    MVI   A,[__r1]
    0E69: 54 0B    MOV   [X+11],A
    0E6B: 3E 26    MVI   A,[__r1]
    0E6D: 54 0C    MOV   [X+12],A
    0E6F: 50 00    MOV   A,0x0
    0E71: 08       PUSH  A
    0E72: 50 0A    MOV   A,0xA
    0E74: 08       PUSH  A
    0E75: 52 0B    MOV   A,[X+11]
    0E77: 08       PUSH  A
    0E78: 52 0C    MOV   A,[X+12]
    0E7A: 08       PUSH  A
    0E7B: 52 06    MOV   A,[X+6]
    0E7D: 08       PUSH  A
    0E7E: 52 07    MOV   A,[X+7]
    0E80: 08       PUSH  A
    0E81: 7C 08 CD LCALL _itoa
    0E84: 38 FA    ADD   SP,0xFA
    0E86: 81 2F    JMP   0x0FB6
    0E88: 07 F8 FE ADD   [X-8],0xFE
    0E8B: 0F F7 FF ADC   [X-9],0xFF
    0E8E: 62 D0 00 MOV   REG[0xD0],0x0
    0E91: 52 F8    MOV   A,[X-8]
    0E93: 53 26    MOV   [__r1],A
    0E95: 52 F7    MOV   A,[X-9]
    0E97: 60 D4    MOV   REG[0xD4],A
    0E99: 3E 26    MVI   A,[__r1]
    0E9B: 53 27    MOV   [__r0],A
    0E9D: 3E 26    MVI   A,[__r1]
    0E9F: 54 0C    MOV   [X+12],A
    0EA1: 51 27    MOV   A,[__r0]
    0EA3: 54 0B    MOV   [X+11],A
    0EA5: 52 FA    MOV   A,[X-6]
    0EA7: 53 26    MOV   [__r1],A
    0EA9: 52 F9    MOV   A,[X-7]
    0EAB: 10       PUSH  X
    0EAC: 58 26    MOV   X,[__r1]
    0EAE: 28       ROMX  
    0EAF: 20       POP   X
    0EB0: 39 75    CMP   A,0x75
    0EB2: B0 1A    JNZ   0x0ECD
    0EB4: 50 00    MOV   A,0x0
    0EB6: 08       PUSH  A
    0EB7: 50 0A    MOV   A,0xA
    0EB9: 08       PUSH  A
    0EBA: 52 0B    MOV   A,[X+11]
    0EBC: 08       PUSH  A
    0EBD: 52 0C    MOV   A,[X+12]
    0EBF: 08       PUSH  A
    0EC0: 52 06    MOV   A,[X+6]
    0EC2: 08       PUSH  A
    0EC3: 52 07    MOV   A,[X+7]
    0EC5: 08       PUSH  A
    0EC6: 7C 0A A6 LCALL _utoa
    0EC9: 38 FA    ADD   SP,0xFA
    0ECB: 80 EA    JMP   0x0FB6
    0ECD: 62 D0 00 MOV   REG[0xD0],0x0
    0ED0: 52 FA    MOV   A,[X-6]
    0ED2: 53 26    MOV   [__r1],A
    0ED4: 52 F9    MOV   A,[X-7]
    0ED6: 10       PUSH  X
    0ED7: 58 26    MOV   X,[__r1]
    0ED9: 28       ROMX  
    0EDA: 20       POP   X
    0EDB: 39 6F    CMP   A,0x6F
    0EDD: B0 1A    JNZ   0x0EF8
    0EDF: 50 00    MOV   A,0x0
    0EE1: 08       PUSH  A
    0EE2: 50 08    MOV   A,0x8
    0EE4: 08       PUSH  A
    0EE5: 52 0B    MOV   A,[X+11]
    0EE7: 08       PUSH  A
    0EE8: 52 0C    MOV   A,[X+12]
    0EEA: 08       PUSH  A
    0EEB: 52 06    MOV   A,[X+6]
    0EED: 08       PUSH  A
    0EEE: 52 07    MOV   A,[X+7]
    0EF0: 08       PUSH  A
    0EF1: 7C 0A A6 LCALL _utoa
    0EF4: 38 FA    ADD   SP,0xFA
    0EF6: 80 BF    JMP   0x0FB6
    0EF8: 62 D0 00 MOV   REG[0xD0],0x0
    0EFB: 52 FA    MOV   A,[X-6]
    0EFD: 53 26    MOV   [__r1],A
    0EFF: 52 F9    MOV   A,[X-7]
    0F01: 10       PUSH  X
    0F02: 58 26    MOV   X,[__r1]
    0F04: 28       ROMX  
    0F05: 20       POP   X
    0F06: 39 70    CMP   A,0x70
    0F08: B0 39    JNZ   0x0F42
    0F0A: 52 07    MOV   A,[X+7]
    0F0C: 53 26    MOV   [__r1],A
    0F0E: 52 06    MOV   A,[X+6]
    0F10: 53 27    MOV   [__r0],A
    0F12: 51 26    MOV   A,[__r1]
    0F14: 01 01    ADD   A,0x1
    0F16: 54 07    MOV   [X+7],A
    0F18: 51 27    MOV   A,[__r0]
    0F1A: 09 00    ADC   A,0x0
    0F1C: 54 06    MOV   [X+6],A
    0F1E: 51 27    MOV   A,[__r0]
    0F20: 60 D5    MOV   REG[0xD5],A
    0F22: 50 30    MOV   A,0x30
    0F24: 3F 26    MVI   [__r1],A
    0F26: 52 07    MOV   A,[X+7]
    0F28: 53 26    MOV   [__r1],A
    0F2A: 52 06    MOV   A,[X+6]
    0F2C: 53 27    MOV   [__r0],A
    0F2E: 51 26    MOV   A,[__r1]
    0F30: 01 01    ADD   A,0x1
    0F32: 54 07    MOV   [X+7],A
    0F34: 51 27    MOV   A,[__r0]
    0F36: 09 00    ADC   A,0x0
    0F38: 54 06    MOV   [X+6],A
    0F3A: 51 27    MOV   A,[__r0]
    0F3C: 60 D5    MOV   REG[0xD5],A
    0F3E: 50 78    MOV   A,0x78
    0F40: 3F 26    MVI   [__r1],A
    0F42: 50 00    MOV   A,0x0
    0F44: 08       PUSH  A
    0F45: 50 10    MOV   A,0x10
    0F47: 08       PUSH  A
    0F48: 52 0B    MOV   A,[X+11]
    0F4A: 08       PUSH  A
    0F4B: 52 0C    MOV   A,[X+12]
    0F4D: 08       PUSH  A
    0F4E: 52 06    MOV   A,[X+6]
    0F50: 08       PUSH  A
    0F51: 52 07    MOV   A,[X+7]
    0F53: 08       PUSH  A
    0F54: 7C 0A A6 LCALL _utoa
    0F57: 38 FA    ADD   SP,0xFA
    0F59: 62 D0 00 MOV   REG[0xD0],0x0
    0F5C: 52 FA    MOV   A,[X-6]
    0F5E: 53 26    MOV   [__r1],A
    0F60: 52 F9    MOV   A,[X-7]
    0F62: 10       PUSH  X
    0F63: 58 26    MOV   X,[__r1]
    0F65: 28       ROMX  
    0F66: 20       POP   X
    0F67: 39 58    CMP   A,0x58
    0F69: B0 4C    JNZ   0x0FB6
    0F6B: 56 01 00 MOV   [X+1],0x0
    0F6E: 56 00 00 MOV   [X+0],0x0
    0F71: 80 33    JMP   0x0FA5
    0F73: 62 D0 00 MOV   REG[0xD0],0x0
    0F76: 52 01    MOV   A,[X+1]
    0F78: 53 26    MOV   [__r1],A
    0F7A: 52 00    MOV   A,[X+0]
    0F7C: 60 D4    MOV   REG[0xD4],A
    0F7E: 3E 26    MVI   A,[__r1]
    0F80: 53 26    MOV   [__r1],A
    0F82: 50 00    MOV   A,0x0
    0F84: 08       PUSH  A
    0F85: 51 26    MOV   A,[__r1]
    0F87: 08       PUSH  A
    0F88: 7C 0C 4C LCALL _toupper
    0F8B: 38 FE    ADD   SP,0xFE
    0F8D: 62 D0 00 MOV   REG[0xD0],0x0
    0F90: 51 26    MOV   A,[__r1]
    0F92: 53 27    MOV   [__r0],A
    0F94: 52 01    MOV   A,[X+1]
    0F96: 53 24    MOV   [__r3],A
    0F98: 52 00    MOV   A,[X+0]
    0F9A: 60 D5    MOV   REG[0xD5],A
    0F9C: 51 27    MOV   A,[__r0]
    0F9E: 3F 24    MVI   [__r3],A
    0FA0: 77 01    INC   [X+1]
    0FA2: 0F 00 00 ADC   [X+0],0x0
    0FA5: 62 D0 00 MOV   REG[0xD0],0x0
    0FA8: 52 01    MOV   A,[X+1]
    0FAA: 53 26    MOV   [__r1],A
    0FAC: 52 00    MOV   A,[X+0]
    0FAE: 60 D4    MOV   REG[0xD4],A
    0FB0: 3E 26    MVI   A,[__r1]
    0FB2: 39 00    CMP   A,0x0
    0FB4: BF BE    JNZ   0x0F73
    0FB6: 56 01 00 MOV   [X+1],0x0
    0FB9: 56 00 00 MOV   [X+0],0x0
    0FBC: 80 D2    JMP   0x108F
    0FBE: 07 F8 FE ADD   [X-8],0xFE
    0FC1: 0F F7 FF ADC   [X-9],0xFF
    0FC4: 62 D0 00 MOV   REG[0xD0],0x0
    0FC7: 52 F8    MOV   A,[X-8]
    0FC9: 53 26    MOV   [__r1],A
    0FCB: 52 F7    MOV   A,[X-9]
    0FCD: 60 D4    MOV   REG[0xD4],A
    0FCF: 3E 26    MVI   A,[__r1]
    0FD1: 3E 26    MVI   A,[__r1]
    0FD3: 54 0D    MOV   [X+13],A
    0FD5: 10       PUSH  X
    0FD6: 52 0D    MOV   A,[X+13]
    0FD8: 08       PUSH  A
    0FD9: 52 FC    MOV   A,[X-4]
    0FDB: 53 26    MOV   [__r1],A
    0FDD: 52 FB    MOV   A,[X-5]
    0FDF: 58 26    MOV   X,[__r1]
    0FE1: 7C 08 C1 LCALL __plcall
    0FE4: 38 FF    ADD   SP,0xFF
    0FE6: 20       POP   X
    0FE7: 77 05    INC   [X+5]
    0FE9: 0F 04 00 ADC   [X+4],0x0
    0FEC: 81 05    JMP   0x10F2
    0FEE: 07 F8 FE ADD   [X-8],0xFE
    0FF1: 0F F7 FF ADC   [X-9],0xFF
    0FF4: 62 D0 00 MOV   REG[0xD0],0x0
    0FF7: 52 F8    MOV   A,[X-8]
    0FF9: 53 26    MOV   [__r1],A
    0FFB: 52 F7    MOV   A,[X-9]
    0FFD: 60 D4    MOV   REG[0xD4],A
    0FFF: 3E 26    MVI   A,[__r1]
    1001: 54 02    MOV   [X+2],A
    1003: 3E 26    MVI   A,[__r1]
    1005: 54 03    MOV   [X+3],A
    1007: 3D 08 2D CMP   [X+8],0x2D
    100A: B0 45    JNZ   0x1050
    100C: 10       PUSH  X
    100D: 50 2D    MOV   A,0x2D
    100F: 08       PUSH  A
    1010: 62 D0 00 MOV   REG[0xD0],0x0
    1013: 52 FC    MOV   A,[X-4]
    1015: 53 26    MOV   [__r1],A
    1017: 52 FB    MOV   A,[X-5]
    1019: 58 26    MOV   X,[__r1]
    101B: 7C 08 C1 LCALL __plcall
    101E: 38 FF    ADD   SP,0xFF
    1020: 20       POP   X
    1021: 77 05    INC   [X+5]
    1023: 0F 04 00 ADC   [X+4],0x0
    1026: 80 29    JMP   0x1050
    1028: 62 D0 00 MOV   REG[0xD0],0x0
    102B: 52 03    MOV   A,[X+3]
    102D: 53 26    MOV   [__r1],A
    102F: 52 02    MOV   A,[X+2]
    1031: 10       PUSH  X
    1032: 58 26    MOV   X,[__r1]
    1034: 28       ROMX  
    1035: 20       POP   X
    1036: 10       PUSH  X
    1037: 08       PUSH  A
    1038: 52 FC    MOV   A,[X-4]
    103A: 53 26    MOV   [__r1],A
    103C: 52 FB    MOV   A,[X-5]
    103E: 58 26    MOV   X,[__r1]
    1040: 7C 08 C1 LCALL __plcall
    1043: 38 FF    ADD   SP,0xFF
    1045: 20       POP   X
    1046: 77 05    INC   [X+5]
    1048: 0F 04 00 ADC   [X+4],0x0
    104B: 77 03    INC   [X+3]
    104D: 0F 02 00 ADC   [X+2],0x0
    1050: 62 D0 00 MOV   REG[0xD0],0x0
    1053: 52 03    MOV   A,[X+3]
    1055: 53 26    MOV   [__r1],A
    1057: 52 02    MOV   A,[X+2]
    1059: 10       PUSH  X
    105A: 58 26    MOV   X,[__r1]
    105C: 28       ROMX  
    105D: 20       POP   X
    105E: 39 00    CMP   A,0x0
    1060: BF C7    JNZ   0x1028
    1062: 80 8F    JMP   0x10F2
    1064: 07 F8 FE ADD   [X-8],0xFE
    1067: 0F F7 FF ADC   [X-9],0xFF
    106A: 62 D0 00 MOV   REG[0xD0],0x0
    106D: 52 F8    MOV   A,[X-8]
    106F: 53 26    MOV   [__r1],A
    1071: 52 F7    MOV   A,[X-9]
    1073: 60 D4    MOV   REG[0xD4],A
    1075: 3E 26    MVI   A,[__r1]
    1077: 54 00    MOV   [X+0],A
    1079: 3E 26    MVI   A,[__r1]
    107B: 54 01    MOV   [X+1],A
    107D: 3D 00 00 CMP   [X+0],0x0
    1080: B0 0E    JNZ   0x108F
    1082: 3D 01 00 CMP   [X+1],0x0
    1085: B0 09    JNZ   0x108F
    1087: 56 03 6C MOV   [X+3],0x6C
    108A: 56 02 03 MOV   [X+2],0x3
    108D: 8F 79    JMP   0x1007
    108F: 3D 08 2D CMP   [X+8],0x2D
    1092: B0 44    JNZ   0x10D7
    1094: 10       PUSH  X
    1095: 50 2D    MOV   A,0x2D
    1097: 08       PUSH  A
    1098: 62 D0 00 MOV   REG[0xD0],0x0
    109B: 52 FC    MOV   A,[X-4]
    109D: 53 26    MOV   [__r1],A
    109F: 52 FB    MOV   A,[X-5]
    10A1: 58 26    MOV   X,[__r1]
    10A3: 7C 08 C1 LCALL __plcall
    10A6: 38 FF    ADD   SP,0xFF
    10A8: 20       POP   X
    10A9: 77 05    INC   [X+5]
    10AB: 0F 04 00 ADC   [X+4],0x0
    10AE: 80 28    JMP   0x10D7
    10B0: 62 D0 00 MOV   REG[0xD0],0x0
    10B3: 52 01    MOV   A,[X+1]
    10B5: 53 26    MOV   [__r1],A
    10B7: 52 00    MOV   A,[X+0]
    10B9: 60 D4    MOV   REG[0xD4],A
    10BB: 3E 26    MVI   A,[__r1]
    10BD: 10       PUSH  X
    10BE: 08       PUSH  A
    10BF: 52 FC    MOV   A,[X-4]
    10C1: 53 26    MOV   [__r1],A
    10C3: 52 FB    MOV   A,[X-5]
    10C5: 58 26    MOV   X,[__r1]
    10C7: 7C 08 C1 LCALL __plcall
    10CA: 38 FF    ADD   SP,0xFF
    10CC: 20       POP   X
    10CD: 77 05    INC   [X+5]
    10CF: 0F 04 00 ADC   [X+4],0x0
    10D2: 77 01    INC   [X+1]
    10D4: 0F 00 00 ADC   [X+0],0x0
    10D7: 62 D0 00 MOV   REG[0xD0],0x0
    10DA: 52 01    MOV   A,[X+1]
    10DC: 53 26    MOV   [__r1],A
    10DE: 52 00    MOV   A,[X+0]
    10E0: 60 D4    MOV   REG[0xD4],A
    10E2: 3E 26    MVI   A,[__r1]
    10E4: 39 00    CMP   A,0x0
    10E6: BF C9    JNZ   0x10B0
    10E8: 80 09    JMP   0x10F2
    10EA: 56 03 7E MOV   [X+3],0x7E
    10ED: 56 02 03 MOV   [X+2],0x3
    10F0: 8F 16    JMP   0x1007
    10F2: 77 FA    INC   [X-6]
    10F4: 0F F9 00 ADC   [X-7],0x0
    10F7: 62 D0 00 MOV   REG[0xD0],0x0
    10FA: 52 FA    MOV   A,[X-6]
    10FC: 53 26    MOV   [__r1],A
    10FE: 52 F9    MOV   A,[X-7]
    1100: 10       PUSH  X
    1101: 58 26    MOV   X,[__r1]
    1103: 28       ROMX  
    1104: 20       POP   X
    1105: 39 00    CMP   A,0x0
    1107: BC 29    JNZ   0x0D31
    1109: 52 05    MOV   A,[X+5]
    110B: 53 26    MOV   [__r1],A
    110D: 52 04    MOV   A,[X+4]
    110F: 53 27    MOV   [__r0],A
    1111: 38 EF    ADD   SP,0xEF
    1113: 20       POP   X
    1114: 7F       RET   
    1115: 10       PUSH  X
    1116: 4F       MOV   X,SP
    1117: 38 04    ADD   SP,0x4
    1119: 80 06    JMP   0x1120
    111B: 77 FC    INC   [X-4]
    111D: 0F FB 00 ADC   [X-5],0x0
    1120: 62 D0 00 MOV   REG[0xD0],0x0
    1123: 52 FC    MOV   A,[X-4]
    1125: 53 26    MOV   [__r1],A
    1127: 52 FB    MOV   A,[X-5]
    1129: 10       PUSH  X
    112A: 58 26    MOV   X,[__r1]
    112C: 28       ROMX  
    112D: 20       POP   X
    112E: 53 26    MOV   [__r1],A
    1130: 50 00    MOV   A,0x0
    1132: 08       PUSH  A
    1133: 51 26    MOV   A,[__r1]
    1135: 08       PUSH  A
    1136: 7C 0C 2B LCALL _isspace
    1139: 38 FE    ADD   SP,0xFE
    113B: 62 D0 00 MOV   REG[0xD0],0x0
    113E: 3C 27 00 CMP   [__r0],0x0
    1141: BF D9    JNZ   0x111B
    1143: 3C 26 00 CMP   [__r1],0x0
    1146: BF D4    JNZ   0x111B
    1148: 56 03 00 MOV   [X+3],0x0
    114B: 56 02 00 MOV   [X+2],0x0
    114E: 62 D0 00 MOV   REG[0xD0],0x0
    1151: 52 FC    MOV   A,[X-4]
    1153: 53 26    MOV   [__r1],A
    1155: 52 FB    MOV   A,[X-5]
    1157: 10       PUSH  X
    1158: 58 26    MOV   X,[__r1]
    115A: 28       ROMX  
    115B: 20       POP   X
    115C: 39 2D    CMP   A,0x2D
    115E: B0 0E    JNZ   0x116D
    1160: 56 03 01 MOV   [X+3],0x1
    1163: 56 02 00 MOV   [X+2],0x0
    1166: 77 FC    INC   [X-4]
    1168: 0F FB 00 ADC   [X-5],0x0
    116B: 80 18    JMP   0x1184
    116D: 62 D0 00 MOV   REG[0xD0],0x0
    1170: 52 FC    MOV   A,[X-4]
    1172: 53 26    MOV   [__r1],A
    1174: 52 FB    MOV   A,[X-5]
    1176: 10       PUSH  X
    1177: 58 26    MOV   X,[__r1]
    1179: 28       ROMX  
    117A: 20       POP   X
    117B: 39 2B    CMP   A,0x2B
    117D: B0 06    JNZ   0x1184
    117F: 77 FC    INC   [X-4]
    1181: 0F FB 00 ADC   [X-5],0x0
    1184: 56 01 00 MOV   [X+1],0x0
    1187: 56 00 00 MOV   [X+0],0x0
    118A: 80 7C    JMP   0x1207
    118C: 62 D0 00 MOV   REG[0xD0],0x0
    118F: 52 FC    MOV   A,[X-4]
    1191: 53 26    MOV   [__r1],A
    1193: 52 FB    MOV   A,[X-5]
    1195: 53 27    MOV   [__r0],A
    1197: 51 26    MOV   A,[__r1]
    1199: 01 01    ADD   A,0x1
    119B: 54 FC    MOV   [X-4],A
    119D: 51 27    MOV   A,[__r0]
    119F: 09 00    ADC   A,0x0
    11A1: 54 FB    MOV   [X-5],A
    11A3: 52 01    MOV   A,[X+1]
    11A5: 53 24    MOV   [__r3],A
    11A7: 52 00    MOV   A,[X+0]
    11A9: 53 25    MOV   [__r2],A
    11AB: 55 22 0A MOV   [__r5],0xA
    11AE: 55 23 00 MOV   [__r4],0x0
    11B1: 55 1B 00 MOV   [__rX],0x0
    11B4: 55 1A 00 MOV   [__rY],0x0
    11B7: 3C 23 00 CMP   [__r4],0x0
    11BA: B0 06    JNZ   0x11C1
    11BC: 3C 22 00 CMP   [__r5],0x0
    11BF: A0 1A    JZ    0x11DA
    11C1: 70 FB    AND   F,0xFB
    11C3: 6E 23    RRC   [__r4]
    11C5: 6E 22    RRC   [__r5]
    11C7: D0 0C    JNC   0x11D4
    11C9: 62 D0 00 MOV   REG[0xD0],0x0
    11CC: 51 24    MOV   A,[__r3]
    11CE: 04 1B    ADD   [__rX],A
    11D0: 51 25    MOV   A,[__r2]
    11D2: 0C 1A    ADC   [__rY],A
    11D4: 65 24    ASL   [__r3]
    11D6: 6B 25    RLC   [__r2]
    11D8: 8F DE    JMP   0x11B7
    11DA: 5F 24 1B MOV   [__r3],[__rX]
    11DD: 5F 25 1A MOV   [__r2],[__rY]
    11E0: 62 D0 00 MOV   REG[0xD0],0x0
    11E3: 51 27    MOV   A,[__r0]
    11E5: 10       PUSH  X
    11E6: 58 26    MOV   X,[__r1]
    11E8: 28       ROMX  
    11E9: 20       POP   X
    11EA: 53 26    MOV   [__r1],A
    11EC: 55 27 00 MOV   [__r0],0x0
    11EF: 51 24    MOV   A,[__r3]
    11F1: 02 26    ADD   A,[__r1]
    11F3: 53 26    MOV   [__r1],A
    11F5: 51 25    MOV   A,[__r2]
    11F7: 0A 27    ADC   A,[__r0]
    11F9: 53 27    MOV   [__r0],A
    11FB: 51 26    MOV   A,[__r1]
    11FD: 11 30    SUB   A,0x30
    11FF: 54 01    MOV   [X+1],A
    1201: 51 27    MOV   A,[__r0]
    1203: 19 00    SBB   A,0x0
    1205: 54 00    MOV   [X+0],A
    1207: 62 D0 00 MOV   REG[0xD0],0x0
    120A: 52 FC    MOV   A,[X-4]
    120C: 53 26    MOV   [__r1],A
    120E: 52 FB    MOV   A,[X-5]
    1210: 10       PUSH  X
    1211: 58 26    MOV   X,[__r1]
    1213: 28       ROMX  
    1214: 20       POP   X
    1215: 53 26    MOV   [__r1],A
    1217: 50 00    MOV   A,0x0
    1219: 08       PUSH  A
    121A: 51 26    MOV   A,[__r1]
    121C: 08       PUSH  A
    121D: 7C 0B E9 LCALL _isdigit
    1220: 38 FE    ADD   SP,0xFE
    1222: 62 D0 00 MOV   REG[0xD0],0x0
    1225: 3C 27 00 CMP   [__r0],0x0
    1228: BF 63    JNZ   0x118C
    122A: 3C 26 00 CMP   [__r1],0x0
    122D: BF 5E    JNZ   0x118C
    122F: 3D 02 00 CMP   [X+2],0x0
    1232: B0 06    JNZ   0x1239
    1234: 3D 03 00 CMP   [X+3],0x0
    1237: A0 14    JZ    0x124C
    1239: 62 D0 00 MOV   REG[0xD0],0x0
    123C: 52 01    MOV   A,[X+1]
    123E: 73       CPL   A
    123F: 11 FF    SUB   A,0xFF
    1241: 53 26    MOV   [__r1],A
    1243: 52 00    MOV   A,[X+0]
    1245: 73       CPL   A
    1246: 19 FF    SBB   A,0xFF
    1248: 53 27    MOV   [__r0],A
    124A: 80 0C    JMP   0x1257
    124C: 62 D0 00 MOV   REG[0xD0],0x0
    124F: 52 01    MOV   A,[X+1]
    1251: 53 26    MOV   [__r1],A
    1253: 52 00    MOV   A,[X+0]
    1255: 53 27    MOV   [__r0],A
    1257: 38 FC    ADD   SP,0xFC
    1259: 20       POP   X
    125A: 7F       RET   
